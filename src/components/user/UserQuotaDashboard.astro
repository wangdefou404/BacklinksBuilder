---
// 用户配额仪表板组件
export interface Props {
  userId: string;
  showUpgradePrompt?: boolean;
  refreshInterval?: number; // 自动刷新间隔（毫秒）
}

const { 
  userId, 
  showUpgradePrompt = true,
  refreshInterval = 30000 // 默认30秒刷新
} = Astro.props;

// 获取配额信息
let quotaData = null;
let quotaError = null;

if (userId) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/user/quota`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userId })
    });

    if (response.ok) {
      quotaData = await response.json();
    } else {
      const error = await response.json();
      quotaError = error.error || 'Failed to load quota data';
      console.error('Quota fetch failed:', error);
    }
  } catch (error) {
    quotaError = 'Network error during quota fetch';
    console.error('Quota fetch error:', error);
  }
}

// 获取状态颜色
const getStatusColor = (percentage: number) => {
  if (percentage >= 90) return 'red';
  if (percentage >= 70) return 'yellow';
  return 'green';
};

// 格式化重置时间
const formatResetTime = (dateString: string | null) => {
  if (!dateString) return '未设置';
  const date = new Date(dateString);
  const now = new Date();
  const diffMs = date.getTime() - now.getTime();
  const diffHours = Math.ceil(diffMs / (1000 * 60 * 60));
  
  if (diffHours <= 0) return '即将重置';
  if (diffHours < 24) return `${diffHours}小时后`;
  const diffDays = Math.ceil(diffHours / 24);
  return `${diffDays}天后`;
};
---

{quotaError ? (
  <div class="quota-dashboard-error bg-red-50 border border-red-200 rounded-lg p-6">
    <div class="flex items-center">
      <svg class="w-6 h-6 text-red-600 mr-3" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
      </svg>
      <div>
        <h3 class="text-lg font-medium text-red-800">配额信息加载失败</h3>
        <p class="text-sm text-red-600 mt-1">{quotaError}</p>
      </div>
    </div>
  </div>
) : quotaData ? (
  <div class="quota-dashboard" data-user-id={userId} data-refresh-interval={refreshInterval}>
    <!-- 用户计划信息 -->
    <div class="plan-info bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6 mb-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class={`w-12 h-12 rounded-full flex items-center justify-center mr-4 ${
            quotaData.planType === 'super' ? 'bg-purple-100 text-purple-600' :
            quotaData.planType === 'pro' ? 'bg-blue-100 text-blue-600' :
            'bg-green-100 text-green-600'
          }`}>
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-xl font-bold text-gray-900">{quotaData.planDisplayName} 计划</h2>
            <p class="text-sm text-gray-600">当前订阅计划</p>
          </div>
        </div>
        {showUpgradePrompt && quotaData.planType === 'free' && (
          <a href="/pricing" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors">
            升级计划
          </a>
        )}
      </div>
    </div>

    <!-- 配额使用情况网格 -->
    <div class="quota-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
      {Object.entries(quotaData.quotas).map(([key, quota]) => {
        const statusColor = quota.unlimited ? 'green' : getStatusColor(quota.percentage);
        return (
          <div class="quota-card bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
            <!-- 配额标题 -->
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-sm font-medium text-gray-900">{quota.name}</h3>
              <span class={`px-2 py-1 rounded-full text-xs font-medium ${
                statusColor === 'green' ? 'bg-green-100 text-green-800' :
                statusColor === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
                'bg-red-100 text-red-800'
              }`}>
                {quota.unlimited ? '无限制' : 
                 quota.remaining > 0 ? '可用' : '已用完'}
              </span>
            </div>

            <!-- 使用统计 -->
            <div class="mb-4">
              <div class="flex justify-between text-sm text-gray-600 mb-2">
                <span>已使用</span>
                <span class="font-medium">{quota.used}</span>
              </div>
              <div class="flex justify-between text-sm text-gray-600 mb-2">
                <span>总限制</span>
                <span class="font-medium">{quota.unlimited ? '∞' : quota.limit}</span>
              </div>
              <div class="flex justify-between text-sm text-gray-600">
                <span>剩余</span>
                <span class={`font-medium ${
                  statusColor === 'green' ? 'text-green-600' :
                  statusColor === 'yellow' ? 'text-yellow-600' :
                  'text-red-600'
                }`}>
                  {quota.unlimited ? '∞' : quota.remaining}
                </span>
              </div>
            </div>

            <!-- 进度条 -->
            {!quota.unlimited && (
              <div class="progress-bar">
                <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
                  <div 
                    class={`h-2 rounded-full transition-all duration-300 ${
                      statusColor === 'green' ? 'bg-green-500' :
                      statusColor === 'yellow' ? 'bg-yellow-500' :
                      'bg-red-500'
                    }`}
                    style={`width: ${Math.min(quota.percentage, 100)}%`}
                  ></div>
                </div>
                <div class="text-xs text-gray-500 text-center">
                  {quota.percentage.toFixed(1)}% 已使用
                </div>
              </div>
            )}

            {quota.unlimited && (
              <div class="text-center py-2">
                <span class="text-sm text-green-600 font-medium">无限制使用</span>
              </div>
            )}
          </div>
        );
      })}
    </div>

    <!-- 配额重置信息 -->
    <div class="reset-info bg-gray-50 border border-gray-200 rounded-lg p-4">
      <h3 class="text-sm font-medium text-gray-900 mb-3">配额重置时间</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
        <div class="flex justify-between">
          <span class="text-gray-600">每日重置:</span>
          <span class="font-medium text-gray-900">
            {formatResetTime(quotaData.resetTimes.daily)}
          </span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-600">每月重置:</span>
          <span class="font-medium text-gray-900">
            {formatResetTime(quotaData.resetTimes.monthly)}
          </span>
        </div>
      </div>
      {quotaData.lastUpdated && (
        <div class="mt-3 pt-3 border-t border-gray-200">
          <div class="flex justify-between text-xs text-gray-500">
            <span>最后更新:</span>
            <span>{new Date(quotaData.lastUpdated).toLocaleString('zh-CN')}</span>
          </div>
        </div>
      )}
    </div>
  </div>
) : (
  <div class="quota-dashboard-loading bg-gray-50 border border-gray-200 rounded-lg p-8">
    <div class="flex items-center justify-center">
      <svg class="animate-spin w-8 h-8 text-gray-600 mr-3" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <div class="text-center">
        <h3 class="text-lg font-medium text-gray-900">加载配额信息</h3>
        <p class="text-sm text-gray-600 mt-1">正在获取您的使用情况...</p>
      </div>
    </div>
  </div>
)}

<script>
  // 自动刷新功能
  document.addEventListener('DOMContentLoaded', function() {
    const dashboard = document.querySelector('.quota-dashboard');
    if (!dashboard) return;
    
    const userId = dashboard.getAttribute('data-user-id');
    const refreshInterval = parseInt(dashboard.getAttribute('data-refresh-interval') || '30000');
    
    if (refreshInterval > 0) {
      setInterval(async () => {
        try {
          const response = await fetch('/api/user/quota', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId })
          });
          
          if (response.ok) {
            const quotaData = await response.json();
            updateQuotaDisplay(quotaData);
          }
        } catch (error) {
          console.error('Failed to refresh quota data:', error);
        }
      }, refreshInterval);
    }
  });
  
  // 更新配额显示
  function updateQuotaDisplay(quotaData) {
    // 更新各个配额卡片的数据
    Object.entries(quotaData.quotas).forEach(([key, quota]) => {
      const card = document.querySelector(`[data-quota-type="${key}"]`);
      if (card) {
        // 更新使用数量
        const usedElement = card.querySelector('.quota-used');
        if (usedElement) usedElement.textContent = quota.used;
        
        // 更新剩余数量
        const remainingElement = card.querySelector('.quota-remaining');
        if (remainingElement) {
          remainingElement.textContent = quota.unlimited ? '∞' : quota.remaining;
        }
        
        // 更新进度条
        const progressBar = card.querySelector('.progress-bar div');
        if (progressBar && !quota.unlimited) {
          progressBar.style.width = `${Math.min(quota.percentage, 100)}%`;
          
          // 更新进度条颜色
          const statusColor = quota.percentage >= 90 ? 'red' : 
                             quota.percentage >= 70 ? 'yellow' : 'green';
          progressBar.className = progressBar.className.replace(
            /(bg-(?:green|yellow|red)-500)/g, 
            `bg-${statusColor}-500`
          );
        }
      }
    });
  }
</script>

<style>
  .quota-dashboard {
    transition: all 0.3s ease-in-out;
  }
  
  .quota-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  
  .quota-card:hover {
    transform: translateY(-2px);
  }
  
  .progress-bar {
    transition: all 0.3s ease-in-out;
  }
  
  @media (max-width: 768px) {
    .quota-grid {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 1024px) {
    .quota-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>