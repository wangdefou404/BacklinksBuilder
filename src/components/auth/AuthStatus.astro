---
// Authentication status component - displays different content based on user login status
import GoogleSignInButton from './GoogleSignInButton.astro';

// Don't fetch user info on server side, handle on client side instead
// const user = null;
---

<script>
  // Import Supabase client
  import { supabase } from '/src/lib/supabase.ts';
  
  // Mount supabase instance to window object for Alpine.js usage
  window.supabaseClient = supabase;
</script>

<div id="auth-status" class="flex items-center space-x-4" x-data="{ 
  user: null,
  isOpen: false,
  loading: true,
  authError: null,
  authSubscription: null,
  
  async init() {
    console.log('🚀 AuthStatus component initialization started');
    this.loading = true;
    
    try {
      // First try to load user info from cookie
      console.log('📋 Step 1: Loading user from cookie...');
      await this.loadUserFromCookie();
      console.log('📋 Step 1 completed, user after cookie load:', this.user);
      
      // Then load complete user information
      console.log('📋 Step 2: Loading complete user information...');
      await this.loadUser();
      console.log('📋 Step 2 completed, final user data:', this.user);
      
      console.log('📋 Step 3: Setting up auth listener...');
      this.setupAuthListener();
      
      console.log('✅ AuthStatus component initialization completed, user status:', this.user ? 'logged in' : 'not logged in');
      if (this.user) {
        console.log('🖼️ Final avatar URLs:', {
          avatar_url: this.user.avatar_url,
          metadata_picture: this.user.user_metadata?.picture,
          metadata_avatar_url: this.user.user_metadata?.avatar_url
        });
      }
    } catch (error) {
      console.error('❌ AuthStatus initialization failed:', error);
      this.authError = 'Authentication system initialization failed';
    } finally {
      this.loading = false;
    }
  },
  
  // Load user info from cookie
  loadUserFromCookie() {
    console.log('🍪 Starting to load user info from cookie');
    console.log('🍪 Current all cookies:', document.cookie);
    
    try {
      // First try to load from session cookie
      const sessionCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('session='));
      
      if (sessionCookie) {
        console.log('🍪 Found session cookie');
        const sessionStr = decodeURIComponent(sessionCookie.split('=')[1]);
        console.log('🍪 Decoded session:', sessionStr);
        const sessionInfo = JSON.parse(sessionStr);
        
        // Construct user object, simulating Supabase user format
        this.user = {
          id: sessionInfo.userId,
          email: sessionInfo.email,
          user_metadata: {
            full_name: sessionInfo.name,
            name: sessionInfo.name,
            picture: sessionInfo.avatar_url,
            avatar_url: sessionInfo.avatar_url
          },
          avatar_url: sessionInfo.avatar_url,
          role: sessionInfo.role
        };
        
        console.log('✅ Successfully loaded user info from session cookie:', this.user);
        return true;
      }
      
      // If no session cookie, try user_info cookie
      const userInfoCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('user_info='));
      
      if (userInfoCookie) {
        console.log('🍪 Found user_info cookie');
        const userInfoStr = decodeURIComponent(userInfoCookie.split('=')[1]);
        console.log('🍪 Decoded user_info:', userInfoStr);
        const userInfo = JSON.parse(userInfoStr);
        
        // Construct user object, simulating Supabase user format
        this.user = {
          id: userInfo.id,
          email: userInfo.email,
          user_metadata: {
            full_name: userInfo.name,
            name: userInfo.name,
            picture: userInfo.avatar_url,
            avatar_url: userInfo.avatar_url
          },
          avatar_url: userInfo.avatar_url,
          role: userInfo.role
        };
        
        console.log('✅ Successfully loaded user info from user_info cookie:', this.user);
        return true;
      }
      
      console.log('❌ No user cookies found');
    } catch (error) {
      console.error('❌ Failed to load user info from cookie:', error);
    }
    return false;
  },
  
  get userName() {
    if (!this.user) return 'User';
    return this.user.user_metadata?.full_name || 
           this.user.user_metadata?.name || 
           this.user.email?.split('@')[0] || 
           'User';
  },
  
  // Check if user is admin
  get isAdmin() {
    if (!this.user?.email) return false;
    
    // Admin email list (can be obtained from environment variables)
    const adminEmails = [
      'admin@example.com',
      'wangdefou@gmail.com', // Example admin email
      'wangpangzier@gmail.com', // Main admin email
      // Can add more admin emails
    ];
    
    // Check if in admin email list
    if (adminEmails.includes(this.user.email.toLowerCase())) {
      return true;
    }
    
    // Check if from specific domain (optional)
    const adminDomains = [
      '@yourdomain.com', // Example company domain
      // Can add more admin domains
    ];
    
    return adminDomains.some(domain => 
      this.user.email.toLowerCase().endsWith(domain)
    );
  },
  
  // Toggle dropdown menu display state
  toggleDropdown() {
    console.log('toggleDropdown called, current isOpen:', this.isOpen);
    this.isOpen = !this.isOpen;
    console.log('toggleDropdown executed, new isOpen:', this.isOpen);
  },
  
  // Load user info from Supabase
  async loadUser() {
    console.log('Starting to load user info');
    
    try {
      const supabase = window.supabaseClient;
      
      // Get current session
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('Failed to get session:', sessionError);
        this.authError = 'Failed to get session';
        return;
      }
      
      if (!session?.user) {
        console.log('No active session, user not logged in');
        // If user info was already loaded from cookie, don't clear it
        if (!this.user) {
          this.user = null;
        }
        console.log('User loading completed, user status:', this.user ? 'logged in' : 'not logged in');
        return;
      }
      
      // If user info was already loaded from cookie, no need to reset
      if (!this.user) {
        console.log('Getting user info from Supabase session');
        
        try {
          // Try to get more complete user info from database
          const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('id', session.user.id)
            .single();
          
          if (userError && userError.code !== 'PGRST116') {
            console.error('Failed to get user data:', userError);
          }
          
          // Merge Supabase Auth user info and database user info
          this.user = {
            ...session.user,
            ...userData,
            user_metadata: {
              ...session.user.user_metadata,
              ...userData?.user_metadata
            }
          };
          
          console.log('User info loaded successfully:', this.user);
        } catch (dbError) {
          console.error('Database query exception:', dbError);
          // If database query fails, at least use Auth user info
          this.user = session.user;
        }
      }
      
      console.log('User loading completed, user status:', this.user ? 'logged in' : 'not logged in');
      
    } catch (error) {
      console.error('Error occurred while loading user info:', error);
      this.authError = 'Failed to load user info';
    }
  },
  
  // Setup authentication state listener
  setupAuthListener() {
    console.log('Setting up authentication state listener');
    
    try {
      const supabase = window.supabaseClient;
      this.authSubscription = supabase.auth.onAuthStateChange((event, session) => {
        console.log('Auth state changed:', event, session?.user ? 'user logged in' : 'no user');
        
        if (event === 'INITIAL_SESSION') {
          console.log('Initial session');
          // Initial session is already handled in loadUser
          return;
        }
        
        if (event === 'SIGNED_IN') {
          console.log('User signed in');
          this.loadUser();
        } else if (event === 'SIGNED_OUT') {
          console.log('User signed out');
          this.user = null;
          this.isOpen = false;
        } else if (event === 'TOKEN_REFRESHED') {
          console.log('Token refreshed');
          // Reload user info when token is refreshed
          this.loadUser();
        }
      });
    } catch (error) {
      console.error('Failed to setup auth listener:', error);
    }
  },
  
  // Handle logout
  async handleLogout() {
    try {
      console.log('🚪 Starting logout process...');
      
      // Call server-side logout API - use correct port
      const apiUrl = window.location.origin + '/api/auth/logout';
      console.log('🚪 Logout API URL:', apiUrl);
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'same-origin'
      });
      
      console.log('🚪 Logout API response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('🚪 Logout API response:', result);
      } else {
        console.warn('🚪 Logout API failed, but continuing to clear local state:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('🚪 Logout API call failed, but continuing to clear local state:', error);
    }
    
    // Clear local state regardless of API call success
    try {
      console.log('🧹 Clearing local storage and cookies...');
      
      // Clear local storage
      if (typeof window !== 'undefined') {
        localStorage.clear();
        sessionStorage.clear();
        
        // Clear all related cookies with consistent domain configuration
        const cookiesToClear = [
          'sb-access-token',
          'sb-refresh-token', 
          'supabase-auth-token',
          'supabase.auth.token',
          'user_info',
          'session',
          'oauth_state'
        ];
        
        // Get current domain
        const currentUrl = window.location.href;
        const isProduction = currentUrl.startsWith('https') && !currentUrl.includes('localhost');
        let domain = '';
        
        if (isProduction) {
          try {
            const urlObj = new URL(currentUrl);
            domain = urlObj.hostname;
            domain = domain.startsWith('www.') ? domain.substring(4) : domain;
          } catch (e) {
            console.warn('Unable to parse current URL, using default domain setting:', e);
          }
        }
        
        cookiesToClear.forEach(cookieName => {
          // Clear cookies with different domains and paths
          if (isProduction && domain) {
            // Production environment: use correct domain
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${domain}`;
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.${domain}`;
          } else {
            // Local environment: use localhost
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=localhost`;
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.localhost`;
          }
          // Generic clear (without specifying domain)
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
        });
        
        console.log('✅ Cleared cookies, domain configuration:', { domain, isProduction });
        
        console.log('✅ Cleared local storage and cookies');
      }
      
      // Reset user state
      this.user = null;
      
      console.log('🔄 Redirecting to homepage...');
      // Force page refresh, redirect to homepage
      window.location.href = '/';
    } catch (error) {
      console.error('❌ Error occurred while clearing local state:', error);
      // Even if clearing fails, try to redirect
      window.location.href = '/';
    }
  }
}" x-cloak x-init="console.log('AuthStatus Alpine component initialized', $data)">
  <!-- Loading state -->
  <div x-show="loading" class="flex items-center space-x-2">
    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
    <span class="text-sm text-gray-600">Loading...</span>
  </div>
  
  <!-- Default login button display -->
  <div x-show="!loading && !user">
    <GoogleSignInButton 
      redirectTo="/admin/backlinks"
      className="inline-flex items-center justify-center px-4 py-2 text-sm bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 font-medium rounded-lg transition-all duration-200 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed shadow-sm hover:shadow-md"
      size="sm"
      variant="primary"
    />
  </div>
  
  <!-- Display user avatar after login -->
  <div x-show="!loading && user" class="relative" x-init="console.log('🖼️ Avatar debug - user data:', user); console.log('🖼️ Avatar URLs:', { avatar_url: user?.avatar_url, metadata_avatar: user?.user_metadata?.avatar_url, metadata_picture: user?.user_metadata?.picture });">
    <!-- User avatar button -->
    <button
      @click="toggleDropdown()"
      @keydown.escape="isOpen = false"
      class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200 focus:outline-none"
      :aria-expanded="isOpen"
      aria-label="User menu"
    >
      <!-- Avatar -->
      <template x-if="user?.avatar_url || user?.user_metadata?.picture || user?.user_metadata?.avatar_url">
        <img
          :src="user?.avatar_url || user?.user_metadata?.picture || user?.user_metadata?.avatar_url"
          :alt="userName"
          class="w-8 h-8 rounded-full object-cover border-2 border-gray-200"
          loading="lazy"
          crossorigin="anonymous"
          referrerpolicy="no-referrer"
          @error="console.error('🖼️ Avatar image failed to load:', $event.target.src)"
          @load="console.log('🖼️ Avatar image loaded successfully:', $event.target.src)"
        />
      </template>
      
      <template x-if="!user?.avatar_url && !user?.user_metadata?.picture && !user?.user_metadata?.avatar_url">
        <div class="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium text-sm">
          <span x-text="userName.charAt(0).toUpperCase()"></span>
        </div>
      </template>
      
      <!-- Username (display on large screens) -->
      <span class="hidden md:block text-sm font-medium text-gray-700 max-w-24 truncate" x-text="userName"></span>
      
      <!-- Dropdown arrow -->
      <svg
        class="w-4 h-4 text-gray-500 transition-transform duration-200"
        :class="{ 'rotate-180': isOpen }"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <!-- Dropdown menu -->
    <div
      x-show="isOpen"
      x-transition:enter="transition ease-out duration-200"
      x-transition:enter-start="opacity-0 scale-95"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-150"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-95"
      @click.away="isOpen = false"
      class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-[60]"
      style="transform-origin: top right;"
      x-init="console.log('Dropdown menu element initialized', { isOpen })"
    >
      <!-- User information -->
      <div class="px-4 py-3 border-b border-gray-100">
        <div class="flex items-center space-x-3">
          <!-- 头像 -->
          <template x-if="user?.avatar_url || user?.user_metadata?.picture || user?.user_metadata?.avatar_url">
            <img
              :src="user?.avatar_url || user?.user_metadata?.picture || user?.user_metadata?.avatar_url"
              :alt="userName"
              class="w-10 h-10 rounded-full object-cover"
              loading="lazy"
              crossorigin="anonymous"
              referrerpolicy="no-referrer"
            />
          </template>
          
          <template x-if="!user?.avatar_url && !user?.user_metadata?.picture && !user?.user_metadata?.avatar_url">
            <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium">
              <span x-text="userName.charAt(0).toUpperCase()"></span>
            </div>
          </template>
          
          <div class="flex-1 min-w-0">
            <p class="text-sm font-medium text-gray-900 truncate" x-text="userName"></p>
            <p class="text-xs text-gray-500 truncate" x-text="user?.email" x-show="user?.email"></p>
          </div>
        </div>
      </div>

      <!-- Menu items -->
      <div class="py-1">
        <a
          :href="isAdmin ? '/admin/dashboard' : '/dashboard'"
          class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150"
        >
          <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          <span x-text="isAdmin ? 'Admin Panel' : 'User Dashboard'"></span>
        </a>
        
        <hr class="my-1 border-gray-100">
        
        <button
          @click="console.log('Logout button clicked'); handleLogout()"
          class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors duration-150"
        >
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
          Logout
        </button>
      </div>
    </div>
  </div>
</div>