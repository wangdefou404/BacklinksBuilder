---
// 认证状态组件 - 根据用户登录状态显示不同内容
import GoogleSignInButton from './GoogleSignInButton.astro';

// 不在服务端获取用户信息，改为在客户端处理
// const user = null;
---

<script>
  // 导入Supabase客户端
  import { supabase } from '/src/lib/supabase.ts';
  
  // 将supabase实例挂载到window对象，供Alpine.js使用
  window.supabaseClient = supabase;
</script>

<div id="auth-status" class="flex items-center space-x-4" x-data="{ 
  user: null,
  isOpen: false,
  loading: true,
  authError: null,
  authSubscription: null,
  
  async init() {
    console.log('AuthStatus 组件初始化开始');
    this.loading = true;
    
    try {
      // 首先尝试从cookie读取用户信息
      await this.loadUserFromCookie();
      
      // 然后加载完整的用户信息
      await this.loadUser();
      this.setupAuthListener();
      
      console.log('AuthStatus 组件初始化完成，用户状态:', this.user ? '已登录' : '未登录');
    } catch (error) {
      console.error('AuthStatus 初始化失败:', error);
      this.authError = '认证系统初始化失败';
    } finally {
      this.loading = false;
    }
  },
  
  // 从cookie加载用户信息
  loadUserFromCookie() {
    console.log('🍪 开始从cookie加载用户信息');
    console.log('🍪 当前所有cookies:', document.cookie);
    
    try {
      // 首先尝试从session cookie加载
      const sessionCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('session='));
      
      if (sessionCookie) {
        console.log('🍪 找到session cookie');
        const sessionStr = decodeURIComponent(sessionCookie.split('=')[1]);
        console.log('🍪 解码后的session:', sessionStr);
        const sessionInfo = JSON.parse(sessionStr);
        
        // 构造用户对象，模拟Supabase用户格式
        this.user = {
          id: sessionInfo.userId,
          email: sessionInfo.email,
          user_metadata: {
            full_name: sessionInfo.name,
            name: sessionInfo.name,
            picture: sessionInfo.avatar_url,
            avatar_url: sessionInfo.avatar_url
          },
          avatar_url: sessionInfo.avatar_url,
          role: sessionInfo.role
        };
        
        console.log('✅ 从session cookie加载用户信息成功:', this.user);
        return true;
      }
      
      // 如果没有session cookie，尝试user_info cookie
      const userInfoCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('user_info='));
      
      if (userInfoCookie) {
        console.log('🍪 找到user_info cookie');
        const userInfoStr = decodeURIComponent(userInfoCookie.split('=')[1]);
        console.log('🍪 解码后的user_info:', userInfoStr);
        const userInfo = JSON.parse(userInfoStr);
        
        // 构造用户对象，模拟Supabase用户格式
        this.user = {
          id: userInfo.id,
          email: userInfo.email,
          user_metadata: {
            full_name: userInfo.name,
            name: userInfo.name,
            picture: userInfo.avatar_url,
            avatar_url: userInfo.avatar_url
          },
          avatar_url: userInfo.avatar_url,
          role: userInfo.role
        };
        
        console.log('✅ 从user_info cookie加载用户信息成功:', this.user);
        return true;
      }
      
      console.log('❌ 没有找到任何用户cookie');
    } catch (error) {
      console.error('❌ 从cookie加载用户信息失败:', error);
    }
    return false;
  },
  
  get userName() {
    if (!this.user) return '用户';
    return this.user.user_metadata?.full_name || 
           this.user.user_metadata?.name || 
           this.user.email?.split('@')[0] || 
           '用户';
  },
  
  // 判断是否为管理员
  get isAdmin() {
    if (!this.user?.email) return false;
    
    // 管理员邮箱列表（可以从环境变量获取）
    const adminEmails = [
      'admin@example.com',
      'wangdefou@gmail.com', // 示例管理员邮箱
      'wangpangzier@gmail.com', // 主要管理员邮箱
      // 可以添加更多管理员邮箱
    ];
    
    // 检查是否在管理员邮箱列表中
    if (adminEmails.includes(this.user.email.toLowerCase())) {
      return true;
    }
    
    // 检查是否为特定域名（可选）
    const adminDomains = [
      '@yourdomain.com', // 示例公司域名
      // 可以添加更多管理员域名
    ];
    
    return adminDomains.some(domain => 
      this.user.email.toLowerCase().endsWith(domain)
    );
  },
  
  // 切换下拉菜单显示状态
  toggleDropdown() {
    console.log('toggleDropdown 被调用，当前 isOpen:', this.isOpen);
    this.isOpen = !this.isOpen;
    console.log('toggleDropdown 执行后，新的 isOpen:', this.isOpen);
  },
  
  // 从Supabase加载用户信息
  async loadUser() {
    console.log('开始加载用户信息');
    
    try {
      const supabase = window.supabaseClient;
      
      // 获取当前会话
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('获取会话失败:', sessionError);
        this.authError = '获取会话失败';
        return;
      }
      
      if (!session?.user) {
        console.log('没有活跃会话，用户未登录');
        // 如果已经从cookie加载了用户信息，就不要清除
        if (!this.user) {
          this.user = null;
        }
        console.log('用户加载完成，用户状态:', this.user ? '已登录' : '未登录');
        return;
      }
      
      // 如果已经从cookie加载了用户信息，就不需要重新设置
      if (!this.user) {
        console.log('从Supabase会话获取用户信息');
        
        try {
          // 尝试从数据库获取更完整的用户信息
          const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('id', session.user.id)
            .single();
          
          if (userError && userError.code !== 'PGRST116') {
            console.error('获取用户数据失败:', userError);
          }
          
          // 合并Supabase Auth用户信息和数据库用户信息
          this.user = {
            ...session.user,
            ...userData,
            user_metadata: {
              ...session.user.user_metadata,
              ...userData?.user_metadata
            }
          };
          
          console.log('用户信息加载成功:', this.user);
        } catch (dbError) {
          console.error('数据库查询异常:', dbError);
          // 如果数据库查询失败，至少使用Auth用户信息
          this.user = session.user;
        }
      }
      
      console.log('用户加载完成，用户状态:', this.user ? '已登录' : '未登录');
      
    } catch (error) {
      console.error('加载用户信息时发生错误:', error);
      this.authError = '加载用户信息失败';
    }
  },
  
  // 设置认证状态监听器
  setupAuthListener() {
    console.log('设置认证状态监听器');
    
    try {
      const supabase = window.supabaseClient;
      this.authSubscription = supabase.auth.onAuthStateChange((event, session) => {
        console.log('Auth state changed:', event, session?.user ? 'user logged in' : 'no user');
        
        if (event === 'INITIAL_SESSION') {
          console.log('初始会话');
          // 初始会话已经在loadUser中处理
          return;
        }
        
        if (event === 'SIGNED_IN') {
          console.log('用户登录');
          this.loadUser();
        } else if (event === 'SIGNED_OUT') {
          console.log('用户登出');
          this.user = null;
          this.isOpen = false;
        } else if (event === 'TOKEN_REFRESHED') {
          console.log('Token已刷新');
          // Token刷新时重新加载用户信息
          this.loadUser();
        }
      });
    } catch (error) {
      console.error('设置认证监听器失败:', error);
    }
  },
  
  // 处理登出
  async handleLogout() {
    try {
      console.log('🚪 开始登出流程...');
      
      // 调用服务端登出API - 使用正确的端口
      const apiUrl = window.location.origin + '/api/auth/logout';
      console.log('🚪 登出API URL:', apiUrl);
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'same-origin'
      });
      
      console.log('🚪 登出API响应状态:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('🚪 登出API响应:', result);
      } else {
        console.warn('🚪 登出API失败，但继续清除本地状态:', response.status, response.statusText);
      }
    } catch (error) {
      console.warn('🚪 登出API调用失败，但继续清除本地状态:', error);
    }
    
    // 无论API调用是否成功，都要清除本地状态
    try {
      console.log('🧹 清除本地存储和cookies...');
      
      // 清除本地存储
      if (typeof window !== 'undefined') {
        localStorage.clear();
        sessionStorage.clear();
        
        // 清除所有相关cookie，使用一致的domain配置
        const cookiesToClear = [
          'sb-access-token',
          'sb-refresh-token', 
          'supabase-auth-token',
          'supabase.auth.token',
          'user_info',
          'session',
          'oauth_state'
        ];
        
        // 获取当前域名
        const currentUrl = window.location.href;
        const isProduction = currentUrl.startsWith('https') && !currentUrl.includes('localhost');
        let domain = '';
        
        if (isProduction) {
          try {
            const urlObj = new URL(currentUrl);
            domain = urlObj.hostname;
            domain = domain.startsWith('www.') ? domain.substring(4) : domain;
          } catch (e) {
            console.warn('无法解析当前URL，使用默认domain设置:', e);
          }
        }
        
        cookiesToClear.forEach(cookieName => {
          // 清除不同域和路径的cookie
          if (isProduction && domain) {
            // 生产环境：使用正确的domain
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${domain}`;
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.${domain}`;
          } else {
            // 本地环境：使用localhost
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=localhost`;
            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.localhost`;
          }
          // 通用清除（不指定domain）
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
        });
        
        console.log('✅ 已清除Cookie，domain配置:', { domain, isProduction });
        
        console.log('✅ 已清除本地存储和cookies');
      }
      
      // 重置用户状态
      this.user = null;
      
      console.log('🔄 重定向到首页...');
      // 强制刷新页面，重定向到首页
      window.location.href = '/';
    } catch (error) {
      console.error('❌ 清除本地状态时发生错误:', error);
      // 即使清除失败，也要尝试重定向
      window.location.href = '/';
    }
  }
}" x-cloak x-init="console.log('AuthStatus Alpine 组件已初始化', $data)">
  <!-- 加载状态 -->
  <div x-show="loading" class="flex items-center space-x-2">
    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
    <span class="text-sm text-gray-600">加载中...</span>
  </div>
  
  <!-- 默认显示登录按钮 -->
  <div x-show="!loading && !user">
    <GoogleSignInButton 
      redirectTo="/admin/backlinks"
      className="inline-flex items-center justify-center px-4 py-2 text-sm bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 font-medium rounded-lg transition-all duration-200 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed shadow-sm hover:shadow-md"
      size="sm"
      variant="primary"
    />
  </div>
  
  <!-- 登录后显示用户头像 -->
  <div x-show="!loading && user" class="relative">
    <!-- 用户头像按钮 -->
    <button
      @click="toggleDropdown()"
      @keydown.escape="isOpen = false"
      class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200 focus:outline-none"
      :aria-expanded="isOpen"
      aria-label="用户菜单"
    >
      <!-- 头像 -->
      <template x-if="user?.user_metadata?.avatar_url || user?.user_metadata?.picture">
        <img
          :src="user.user_metadata?.avatar_url || user.user_metadata?.picture"
          :alt="userName"
          class="w-8 h-8 rounded-full object-cover border-2 border-gray-200"
          loading="lazy"
        />
      </template>
      
      <template x-if="!user?.user_metadata?.avatar_url && !user?.user_metadata?.picture">
        <div class="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium text-sm">
          <span x-text="userName.charAt(0).toUpperCase()"></span>
        </div>
      </template>
      
      <!-- 用户名 (在大屏幕上显示) -->
      <span class="hidden md:block text-sm font-medium text-gray-700 max-w-24 truncate" x-text="userName"></span>
      
      <!-- 下拉箭头 -->
      <svg
        class="w-4 h-4 text-gray-500 transition-transform duration-200"
        :class="{ 'rotate-180': isOpen }"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <!-- 下拉菜单 -->
    <div
      x-show="isOpen"
      x-transition:enter="transition ease-out duration-200"
      x-transition:enter-start="opacity-0 scale-95"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-150"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-95"
      @click.away="isOpen = false"
      class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-[60]"
      style="transform-origin: top right;"
      x-init="console.log('下拉菜单元素初始化', { isOpen })"
    >
      <!-- 用户信息 -->
      <div class="px-4 py-3 border-b border-gray-100">
        <div class="flex items-center space-x-3">
          <!-- 头像 -->
          <template x-if="user?.user_metadata?.avatar_url || user?.user_metadata?.picture">
            <img
              :src="user.user_metadata?.avatar_url || user.user_metadata?.picture"
              :alt="userName"
              class="w-10 h-10 rounded-full object-cover"
              loading="lazy"
            />
          </template>
          
          <template x-if="!user?.user_metadata?.avatar_url && !user?.user_metadata?.picture">
            <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium">
              <span x-text="userName.charAt(0).toUpperCase()"></span>
            </div>
          </template>
          
          <div class="flex-1 min-w-0">
            <p class="text-sm font-medium text-gray-900 truncate" x-text="userName"></p>
            <p class="text-xs text-gray-500 truncate" x-text="user?.email" x-show="user?.email"></p>
          </div>
        </div>
      </div>

      <!-- 菜单项 -->
      <div class="py-1">
        <a
          :href="isAdmin ? '/admin/dashboard' : '/dashboard'"
          class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150"
        >
          <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          <span x-text="isAdmin ? '管理面板' : '管理员登录'"></span>
        </a>
        
        <hr class="my-1 border-gray-100">
        
        <button
          @click="console.log('退出登录按钮被点击'); handleLogout()"
          class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors duration-150"
        >
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
          退出登录
        </button>
      </div>
    </div>
  </div>
</div>