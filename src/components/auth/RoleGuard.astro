---
export interface Props {
  allowedRoles: string[];
  currentRole?: string;
  redirectTo?: string;
  showError?: boolean;
}

const { 
  allowedRoles, 
  currentRole, 
  redirectTo = '/user/dashboard',
  showError = true 
} = Astro.props;

// 如果没有提供当前角色，尝试从会话中获取
let userRole = currentRole;
if (!userRole) {
  const session = Astro.cookies.get('session')?.value;
  if (session) {
    try {
      // 先解码URL编码的字符串，再解析JSON
      const decodedSession = decodeURIComponent(session);
      const user = JSON.parse(decodedSession);
      const roleResponse = await fetch(`${Astro.url.origin}/api/auth/get-user-role?userId=${user.userId}`);
      if (roleResponse.ok) {
        const roleData = await roleResponse.json();
        userRole = roleData.role;
      }
    } catch (error) {
      console.error('Error getting user role:', error);
    }
  }
}

// Helper function to get role display names
function getRoleDisplayName(role: string): string {
  const roleNames: Record<string, string> = {
    free: 'Free User',
    user: 'Regular User',
    pro: 'Pro User',
    super: 'Super User',
    admin: 'Administrator'
  };
  return roleNames[role] || role;
}

// 检查权限
const hasPermission = userRole && allowedRoles.includes(userRole);

// 如果没有权限且不显示错误，则重定向
if (!hasPermission && !showError) {
  return Astro.redirect(redirectTo);
}
---

{hasPermission ? (
  <slot />
) : (
  showError && (
    <div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <div class="text-center">
            <!-- 权限不足图标 -->
            <svg class="mx-auto h-16 w-16 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Access Restricted</h2>
            <p class="text-gray-600 mb-6">
              Sorry, you don't have permission to access this page.
              {userRole ? `Your current role is: ${getRoleDisplayName(userRole)}` : 'Please log in first.'}
            </p>
            
            <!-- Required permission information -->
            <div class="bg-gray-50 rounded-lg p-4 mb-6">
              <h3 class="text-sm font-medium text-gray-900 mb-2">This page requires one of the following roles:</h3>
              <div class="flex flex-wrap justify-center gap-2">
                {allowedRoles.map(role => (
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                    {getRoleDisplayName(role)}
                  </span>
                ))}
              </div>
            </div>
            
            <!-- Action buttons -->
            <div class="space-y-3">
              {!userRole ? (
                <a 
                  href="/login" 
                  class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                >
                  Go to Login
                </a>
              ) : (
                <div class="space-y-3">
                  <a 
                    href="/user/dashboard" 
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                  >
                    Back to Dashboard
                  </a>
                  
                  {userRole === 'free' && (
                    <a 
                      href="/pricing" 
                      class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                    >
                      Upgrade Account
                    </a>
                  )}
                </div>
              )}
              
              <button 
                onclick="history.back()" 
                class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
              >
                Go Back
              </button>
            </div>
            
            <!-- Help information -->
            <div class="mt-6 text-xs text-gray-500">
              <p>If you believe this is an error, please contact the administrator.</p>
              {userRole && (
                <p class="mt-1">Current role: {getRoleDisplayName(userRole)}</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
)}

<script define:vars={{ userRole, allowedRoles }}>
  // Client-side role validation (optional additional security layer)
  if (typeof window !== 'undefined') {
    // Client-side role validation logic can be added here
    console.log('Current user role:', userRole);
    console.log('Required roles:', allowedRoles);
  }
</script>

<script is:inline>
  // Helper function to get role display names
  function getRoleDisplayName(role) {
    const roleNames = {
      free: 'Free User',
      user: 'Regular User',
      Pro: 'Pro User',
      super: 'Super User',
      admin: 'Administrator'
    };
    return roleNames[role] || role;
  }
  
  // Interactive features can be added on the client side
  document.addEventListener('DOMContentLoaded', function() {
    // Client-side interaction logic can be added here
  });
</script>

<style>
  .transition-colors {
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
</style>