---
// 用户头像组件
export interface Props {
  user?: {
    id: string;
    email?: string;
    user_metadata?: {
      full_name?: string;
      name?: string;
      avatar_url?: string;
      picture?: string;
    };
  } | null;
  className?: string;
}

const { user, className = '' } = Astro.props;

// 获取用户信息
const userName = user?.user_metadata?.full_name || user?.user_metadata?.name || user?.email?.split('@')[0] || '用户';
const avatarUrl = user?.user_metadata?.avatar_url || user?.user_metadata?.picture;
const userEmail = user?.email;
---

<div class={`relative ${className}`} id="user-avatar-container">
  <!-- 用户头像按钮 -->
  <button
    id="user-avatar-btn"
    class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2"
    aria-label="用户菜单"
    aria-expanded="false"
  >
    <!-- 头像 -->
    {avatarUrl ? (
      <img
        src={avatarUrl}
        alt={userName}
        class="w-8 h-8 rounded-full object-cover border-2 border-gray-200"
        loading="lazy"
      />
    ) : (
      <!-- 默认头像 -->
      <div class="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium text-sm">
        {userName.charAt(0).toUpperCase()}
      </div>
    )}
    
    <!-- 用户名 (在大屏幕上显示) -->
    <span class="hidden md:block text-sm font-medium text-gray-700 max-w-24 truncate">
      {userName}
    </span>
    
    <!-- 下拉箭头 -->
    <svg
      id="dropdown-arrow"
      class="w-4 h-4 text-gray-500 transition-transform duration-200"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <!-- 下拉菜单 -->
  <div
    id="dropdown-menu"
    class="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 opacity-0 scale-95 transform transition-all duration-200 pointer-events-none"
  >
    <!-- 用户信息 -->
    <div class="px-4 py-3 border-b border-gray-100">
      <div class="flex items-center space-x-3">
        {avatarUrl ? (
          <img
            src={avatarUrl}
            alt={userName}
            class="w-10 h-10 rounded-full object-cover"
            loading="lazy"
          />
        ) : (
          <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium">
            {userName.charAt(0).toUpperCase()}
          </div>
        )}
        <div class="flex-1 min-w-0">
          <p class="text-sm font-medium text-gray-900 truncate">{userName}</p>
          {userEmail && (
            <p class="text-xs text-gray-500 truncate">{userEmail}</p>
          )}
        </div>
      </div>
    </div>

    <!-- 菜单项 -->
    <div class="py-1">
      <a
        href="/admin/backlinks"
        class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150"
      >
        <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        管理面板
      </a>
      
      <a
        href="/admin/profile"
        class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150"
      >
        <svg class="w-4 h-4 mr-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
        个人资料
      </a>
      
      <hr class="my-1 border-gray-100">
      
      <button
        id="logout-btn"
        class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors duration-150"
      >
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
        </svg>
        退出登录
      </button>
    </div>
  </div>
</div>

<script>
  import { signOut } from '../../lib/auth';

  // 等待DOM加载完成
  document.addEventListener('DOMContentLoaded', () => {
    const avatarBtn = document.getElementById('user-avatar-btn');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const dropdownArrow = document.getElementById('dropdown-arrow');
    const logoutBtn = document.getElementById('logout-btn');
    
    let isOpen = false;

    // 切换下拉菜单
    function toggleDropdown() {
      isOpen = !isOpen;
      
      if (isOpen) {
        // 显示菜单
        dropdownMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
        dropdownMenu.classList.add('opacity-100', 'scale-100');
        dropdownArrow.classList.add('rotate-180');
        avatarBtn.setAttribute('aria-expanded', 'true');
      } else {
        // 隐藏菜单
        dropdownMenu.classList.remove('opacity-100', 'scale-100');
        dropdownMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        dropdownArrow.classList.remove('rotate-180');
        avatarBtn.setAttribute('aria-expanded', 'false');
      }
    }

    // 关闭下拉菜单
    function closeDropdown() {
      if (isOpen) {
        isOpen = false;
        dropdownMenu.classList.remove('opacity-100', 'scale-100');
        dropdownMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        dropdownArrow.classList.remove('rotate-180');
        avatarBtn.setAttribute('aria-expanded', 'false');
      }
    }

    // 头像按钮点击事件
    if (avatarBtn) {
      avatarBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleDropdown();
      });
    }

    // 点击外部关闭菜单
    document.addEventListener('click', (e) => {
      const container = document.getElementById('user-avatar-container');
      if (container && !container.contains(e.target)) {
        closeDropdown();
      }
    });

    // ESC键关闭菜单
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });

    // 处理登出
    if (logoutBtn) {
      logoutBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        try {
          await signOut();
          closeDropdown();
        } catch (error) {
          console.error('登出失败:', error);
          alert('登出失败，请稍后重试');
        }
      });
    }
  });
</script>