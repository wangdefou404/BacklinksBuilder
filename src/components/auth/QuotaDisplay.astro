---
// 配额显示组件 - 显示用户配额使用情况
export interface Props {
  quotaType: 'dr_checks' | 'backlink_generations' | 'traffic_checks';
  userId?: string;
  showProgress?: boolean;
  showDetails?: boolean;
  compact?: boolean;
  refreshInterval?: number; // 自动刷新间隔（毫秒）
}

const { 
  quotaType, 
  userId, 
  showProgress = true, 
  showDetails = true, 
  compact = false,
  refreshInterval = 0
} = Astro.props;

// 配额类型显示名称映射
const quotaTypeNames = {
  'dr_checks': 'DR检查',
  'backlink_generations': '外链生成',
  'traffic_checks': '流量检查'
};

// 从会话中获取用户ID（如果未提供）
let currentUserId = userId;
if (!currentUserId) {
  // 尝试从Astro.locals或cookies中获取用户信息
  const userSession = Astro.locals.user || Astro.cookies.get('user')?.value;
  if (userSession) {
    try {
      const userData = typeof userSession === 'string' ? JSON.parse(userSession) : userSession;
      currentUserId = userData.id;
    } catch (error) {
      console.error('Failed to parse user session:', error);
    }
  }
}

// 获取配额信息
let quotaData = null;
let quotaError = null;
let canUse = false;

if (currentUserId && quotaType) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/auth/check-quota`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: currentUserId,
        quotaType: quotaType
      })
    });

    if (response.ok) {
      const result = await response.json();
      quotaData = result.quota;
      canUse = result.canUse;
    } else {
      const error = await response.json();
      quotaError = error.error || 'Quota check failed';
      console.error('Quota check failed:', error);
    }
  } catch (error) {
    quotaError = 'Network error during quota check';
    console.error('Quota check error:', error);
  }
}

// 计算进度百分比
const getProgressPercentage = () => {
  if (!quotaData || quotaData.quota_limit === -1) return 0;
  return Math.min((quotaData.used_count / quotaData.quota_limit) * 100, 100);
};

// 获取状态颜色
const getStatusColor = () => {
  if (!quotaData) return 'gray';
  if (quotaData.quota_limit === -1) return 'green'; // 无限制
  const percentage = getProgressPercentage();
  if (percentage >= 90) return 'red';
  if (percentage >= 70) return 'yellow';
  return 'green';
};

const statusColor = getStatusColor();
const progressPercentage = getProgressPercentage();
---

{quotaError ? (
  <div class="quota-error bg-red-50 border border-red-200 rounded-lg p-3">
    <div class="flex items-center">
      <svg class="w-4 h-4 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
      </svg>
      <span class="text-sm text-red-700">配额信息加载失败: {quotaError}</span>
    </div>
  </div>
) : quotaData ? (
  <div class={`quota-display ${compact ? 'compact' : ''}`} data-quota-type={quotaType} data-user-id={currentUserId} data-refresh-interval={refreshInterval}>
    {!compact && (
      <div class="quota-header flex items-center justify-between mb-2">
        <h3 class="text-sm font-medium text-gray-900">{quotaTypeNames[quotaType]}</h3>
        <span class={`status-badge px-2 py-1 rounded-full text-xs font-medium ${
          statusColor === 'green' ? 'bg-green-100 text-green-800' :
          statusColor === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
          'bg-red-100 text-red-800'
        }`}>
          {canUse ? '可用' : '已用完'}
        </span>
      </div>
    )}

    {showProgress && (
      <div class="quota-progress mb-2">
        <div class="flex justify-between text-xs text-gray-600 mb-1">
          <span>已使用: {quotaData.used_count}</span>
          <span>
            {quotaData.quota_limit === -1 ? '无限制' : `限制: ${quotaData.quota_limit}`}
          </span>
        </div>
        {quotaData.quota_limit !== -1 && (
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div 
              class={`h-2 rounded-full transition-all duration-300 ${
                statusColor === 'green' ? 'bg-green-500' :
                statusColor === 'yellow' ? 'bg-yellow-500' :
                'bg-red-500'
              }`}
              style={`width: ${progressPercentage}%`}
            ></div>
          </div>
        )}
      </div>
    )}

    {showDetails && (
      <div class="quota-details text-xs text-gray-500">
        <div class="flex justify-between">
          <span>剩余:</span>
          <span class={`font-medium ${
            statusColor === 'green' ? 'text-green-600' :
            statusColor === 'yellow' ? 'text-yellow-600' :
            'text-red-600'
          }`}>
            {quotaData.quota_limit === -1 ? '无限制' : Math.max(0, quotaData.quota_limit - quotaData.used_count)}
          </span>
        </div>
        {quotaData.reset_date && (
          <div class="flex justify-between mt-1">
            <span>重置时间:</span>
            <span>{new Date(quotaData.reset_date).toLocaleDateString('zh-CN')}</span>
          </div>
        )}
      </div>
    )}

    {compact && (
      <div class="compact-display flex items-center justify-between">
        <span class="text-sm text-gray-700">{quotaTypeNames[quotaType]}</span>
        <span class={`text-sm font-medium ${
          statusColor === 'green' ? 'text-green-600' :
          statusColor === 'yellow' ? 'text-yellow-600' :
          'text-red-600'
        }`}>
          {quotaData.used_count}/{quotaData.quota_limit === -1 ? '∞' : quotaData.quota_limit}
        </span>
      </div>
    )}
  </div>
) : (
  <div class="quota-loading bg-gray-50 border border-gray-200 rounded-lg p-3">
    <div class="flex items-center">
      <svg class="animate-spin w-4 h-4 text-gray-600 mr-2" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span class="text-sm text-gray-600">加载配额信息...</span>
    </div>
  </div>
)}

<style>
  .quota-display {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1rem;
    background-color: #ffffff;
    transition: all 0.2s ease-in-out;
  }
  
  .quota-display:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  .quota-display.compact {
    padding: 0.75rem;
  }
  
  .quota-progress {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  .status-badge {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }
</style>

<script>
  // 客户端配额管理
  class QuotaDisplay {
    static async getQuota(userId: string, quotaType: string) {
      try {
        const response = await fetch('/api/auth/check-quota', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId, quotaType })
        });

        if (response.ok) {
          return await response.json();
        }
        return null;
      } catch (error) {
        console.error('Client-side quota check failed:', error);
        return null;
      }
    }

    static async refreshQuota(elementSelector: string) {
      const element = document.querySelector(elementSelector);
      if (!element) return;

      const userId = element.getAttribute('data-user-id');
      const quotaType = element.getAttribute('data-quota-type');
      
      if (!userId || !quotaType) return;

      const quotaData = await this.getQuota(userId, quotaType);
      if (quotaData) {
        // 触发重新渲染（可以通过自定义事件实现）
        element.dispatchEvent(new CustomEvent('quota-updated', { detail: quotaData }));
      }
    }

    static setupAutoRefresh() {
      document.querySelectorAll('.quota-display[data-refresh-interval]').forEach(element => {
        const interval = parseInt(element.getAttribute('data-refresh-interval') || '0');
        if (interval > 0) {
          setInterval(() => {
            this.refreshQuota(`[data-user-id="${element.getAttribute('data-user-id')}"][data-quota-type="${element.getAttribute('data-quota-type')}"]`);
          }, interval);
        }
      });
    }
  }

  // 页面加载完成后设置自动刷新
  document.addEventListener('DOMContentLoaded', () => {
    QuotaDisplay.setupAutoRefresh();
  });

  // 将QuotaDisplay添加到全局作用域
  (window as any).QuotaDisplay = QuotaDisplay;
</script>