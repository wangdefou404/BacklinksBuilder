---
interface Props {
  id?: string;
  label?: string;
  placeholder?: string;
  maxDomains?: number;
  rows?: number;
}

const { 
  id = "domains", 
  label = "Domains", 
  placeholder = "Enter domains (one per line)", 
  maxDomains = 10,
  rows = 8 
} = Astro.props;
---

<div class="mb-6">
  <label for={id} class="block text-sm font-medium text-gray-700 mb-1">{label}</label>
  <div class="relative">
    <textarea
      id={id}
      name={id}
      rows={rows}
      class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      placeholder={placeholder}
    ></textarea>
  </div>
  <div class="mt-1">
    <span id={`${id}-count`} class="text-sm text-gray-600">0 domains entered</span>
  </div>
</div>

<script is:inline define:vars={{ id, maxDomains }}>
  document.addEventListener('DOMContentLoaded', function() {
    const textarea = document.getElementById(id);
    const countElement = document.getElementById(id + '-count');
    
    if (!textarea || !countElement) return;
    
    function updateDomainCount() {
      const text = textarea.value.trim();
      const domains = text ? text.split('\n').filter(line => line.trim()) : [];
      
      // 更新计数显示
      countElement.textContent = `${domains.length} domains entered (max ${maxDomains} allowed)`;
      
      // 检查是否超过限制
      if (domains.length > maxDomains) {
        countElement.classList.add('text-red-500');
        countElement.classList.remove('text-gray-600');
      } else {
        countElement.classList.remove('text-red-500');
        countElement.classList.add('text-gray-600');
      }
      
      // 触发自定义事件
      textarea.dispatchEvent(new CustomEvent('domainCountUpdate', {
        detail: { count: domains.length, domains: domains, isValid: domains.length <= maxDomains }
      }));
    }
    
    textarea.addEventListener('input', updateDomainCount);
    updateDomainCount(); // 初始化
  });
</script>