---
export interface Props {
  id: string;
  label: string;
  placeholder: string;
  maxDomains?: number;
  rows?: number;
}

const { id, label, placeholder, maxDomains = 100, rows = 8 } = Astro.props;
---

<div class="mb-8">
  <label for={id} class="block text-base font-medium text-gray-700 mb-4">
    {label}
  </label>
  <textarea
    id={id}
    rows={rows}
    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
    placeholder={placeholder}></textarea>
  <div class="flex justify-between items-center mt-2">
    <span class="text-sm text-gray-500" id={`${id}-count`}>0 domains entered</span>
    <span class="text-sm text-gray-500">Remaining checks: <span id="remaining-checks" class="font-semibold text-blue-600">10</span></span>
  </div>
</div>

<script define:vars={{ id, maxDomains }}>
  // Domain counter functionality
  const textarea = document.getElementById(id);
  const countElement = document.getElementById(`${id}-count`);
  
  if (textarea && countElement) {
    textarea.addEventListener('input', function() {
      const domains = this.value.trim().split('\n').filter(domain => domain.trim() !== '');
      countElement.textContent = `${domains.length} domains entered`;
      
      if (domains.length > maxDomains) {
        countElement.textContent = `${domains.length} domains entered (max ${maxDomains} allowed)`;
        countElement.classList.add('text-red-500');
      } else {
        countElement.classList.remove('text-red-500');
      }
      
      // Dispatch custom event for parent components
      const event = new CustomEvent('domainCountChange', {
        detail: { count: domains.length, domains: domains, isValid: domains.length <= maxDomains }
      });
      textarea.dispatchEvent(event);
    });
  }
</script>