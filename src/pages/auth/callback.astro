---
// OAuth回调处理页面
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="登录处理中...">
  <div class="min-h-screen flex items-center justify-center bg-gray-50">
    <div class="max-w-md w-full space-y-8 p-8">
      <div class="text-center">
        <!-- 加载动画 -->
        <div class="flex justify-center mb-6">
          <svg
            class="animate-spin h-12 w-12 text-blue-600"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
            ></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        </div>
        
        <h2 class="text-2xl font-bold text-gray-900 mb-2">
          正在处理登录...
        </h2>
        
        <p class="text-gray-600 mb-6">
          请稍候，我们正在验证您的身份信息
        </p>
        
        <!-- 状态消息 -->
        <div id="status-message" class="text-sm text-gray-500">
          正在连接到认证服务器...
        </div>
        
        <!-- 错误消息 -->
        <div id="error-message" class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span id="error-text" class="text-red-800"></span>
          </div>
          <div class="mt-3">
            <button
              id="retry-btn"
              class="text-sm bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded transition-colors"
            >
              重试
            </button>
            <a
              href="/auth/login"
              class="text-sm text-red-600 hover:text-red-800 ml-3 underline"
            >
              返回登录页
            </a>
          </div>
        </div>
        
        <!-- 成功消息 -->
        <div id="success-message" class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-green-800">登录成功！正在跳转...</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { supabase } from '../../lib/supabase';
  import { syncUserToDatabase } from '../../lib/auth';

  // 获取DOM元素
  const statusMessage = document.getElementById('status-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');
  const successMessage = document.getElementById('success-message');
  const retryBtn = document.getElementById('retry-btn');

  // 更新状态消息
  function updateStatus(message: string) {
    if (statusMessage) {
      statusMessage.textContent = message;
    }
  }

  // 显示错误消息
  function showError(message: string) {
    if (errorMessage && errorText) {
      errorText.textContent = message;
      errorMessage.classList.remove('hidden');
    }
    if (statusMessage) {
      statusMessage.classList.add('hidden');
    }
  }

  // 显示成功消息
  function showSuccess() {
    if (successMessage) {
      successMessage.classList.remove('hidden');
    }
    if (statusMessage) {
      statusMessage.classList.add('hidden');
    }
  }

  // 检查是否有支付意图
  function hasPaymentIntent() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('payment_intent') === 'true';
  }

  // 处理支付意图
  async function handlePaymentIntent() {
    try {
      updateStatus('正在处理支付请求...');
      
      // 从sessionStorage获取支付数据
      const paymentDataStr = sessionStorage.getItem('payment_data');
      if (!paymentDataStr) {
        throw new Error('支付信息已过期，请重新选择套餐');
      }
      
      const paymentData = JSON.parse(paymentDataStr);
      
      // 检查数据是否过期（30分钟）
      if (Date.now() - paymentData.timestamp > 30 * 60 * 1000) {
        sessionStorage.removeItem('payment_data');
        throw new Error('支付信息已过期，请重新选择套餐');
      }
      
      updateStatus('正在获取用户信息...');
      
      // 获取用户ID
      const authResponse = await fetch('/api/auth/check');
      if (!authResponse.ok) {
        throw new Error('用户认证失败');
      }
      
      const authData = await authResponse.json();
      if (!authData.authenticated || !authData.user?.id) {
        throw new Error('用户未登录');
      }
      
      updateStatus('正在创建支付会话...');
      
      // 创建支付会话
      const checkoutResponse = await fetch('/api/payment/create-checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          plan: paymentData.plan,
          billing_cycle: paymentData.billing_cycle,
          user_id: authData.user.id
        })
      });
      
      if (!checkoutResponse.ok) {
        const errorData = await checkoutResponse.json();
        throw new Error(errorData.error || '创建支付会话失败');
      }
      
      const checkoutData = await checkoutResponse.json();
      
      if (!checkoutData.url) {
        throw new Error('未获取到支付链接');
      }
      
      // 清除sessionStorage中的支付数据
      sessionStorage.removeItem('payment_data');
      
      updateStatus('正在跳转到支付页面...');
      
      // 跳转到Stripe支付页面
      window.location.href = checkoutData.url;
      
    } catch (error) {
      console.error('处理支付意图失败:', error);
      showError(error instanceof Error ? error.message : '支付处理失败，请重试');
    }
  }

  // 处理OAuth回调
  async function handleOAuthCallback() {
    try {
      updateStatus('正在验证登录状态...');

      // 首先尝试从URL fragment中获取认证参数
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');
      
      if (accessToken && refreshToken) {
        console.log('从URL fragment中找到认证参数，正在设置session...');
        
        // 使用Supabase的setSession方法设置session
        const { data, error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken
        });
        
        if (error) {
          console.error('设置会话失败:', error);
          throw new Error(`认证失败: ${error.message}`);
        }
        
        if (!data.session || !data.session.user) {
          throw new Error('设置会话后未找到有效的登录会话');
        }
        
        console.log('从fragment参数成功设置session:', data.session.user.email);
      } else {
        // 如果fragment中没有参数，尝试获取现有session
        console.log('URL fragment中未找到认证参数，尝试获取现有session...');
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('获取会话失败:', error);
          throw new Error(`认证失败: ${error.message}`);
        }

        if (!data.session || !data.session.user) {
          throw new Error('未找到有效的登录会话');
        }
      }

      // 获取session数据
      const { data: sessionData } = await supabase.auth.getSession();
      const finalSession = sessionData.session;
      const user = finalSession?.user;
      
      if (!finalSession || !user) {
        throw new Error('设置session后无法获取用户信息');
      }
      
      console.log('用户认证成功:', user.email);

      // 手动设置cookies（确保在所有环境下都能正常工作）
      const isLocalhost = window.location.hostname === 'localhost';
      document.cookie = `sb-access-token=${finalSession.access_token}; path=/; ${isLocalhost ? '' : 'secure; '}samesite=lax; max-age=604800`; // 7天
      document.cookie = `sb-refresh-token=${finalSession.refresh_token}; path=/; ${isLocalhost ? '' : 'secure; '}samesite=lax; max-age=2592000`; // 30天
      
      console.log('Cookies设置完成');

      // 同步用户数据到数据库
      updateStatus('正在同步用户数据...');
      try {
        await syncUserToDatabase(user);
        console.log('用户数据同步成功');
      } catch (syncError) {
        console.warn('用户数据同步失败，但登录成功:', syncError);
        // 即使同步失败，也继续登录流程
      }

      updateStatus('登录成功，正在跳转...');
      showSuccess();

      // 检查是否有支付意图需要处理
      if (hasPaymentIntent()) {
        console.log('发现支付意图，处理支付流程...');
        await handlePaymentIntent();
        return;
      }

      // 检查重定向参数（优先从search参数获取，然后从fragment获取）
      const urlParams = new URLSearchParams(window.location.search);
      const redirectHashParams = new URLSearchParams(window.location.hash.substring(1));
      const redirectTo = urlParams.get('redirect_to') || redirectHashParams.get('redirect_to') || '/dashboard';
      
      console.log('准备重定向到:', redirectTo);
      
      // 直接使用redirectTo，不进行过度清理
      setTimeout(() => {
        window.location.href = redirectTo;
      }, 1500);

    } catch (error) {
      console.error('OAuth回调处理失败:', error);
      showError(error instanceof Error ? error.message : '登录处理失败，请重试');
    }
  }

  // 重试按钮事件
  if (retryBtn) {
    retryBtn.addEventListener('click', () => {
      // 隐藏错误消息
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
      if (statusMessage) {
        statusMessage.classList.remove('hidden');
      }
      
      // 重新处理回调
      handleOAuthCallback();
    });
  }

  // 页面加载时处理OAuth回调
  document.addEventListener('DOMContentLoaded', () => {
    // 检查URL中是否包含认证相关参数（包括search和fragment）
    const urlParams = new URLSearchParams(window.location.search);
    const hashParams = new URLSearchParams(window.location.hash.substring(1));
    
    const hasSearchAuthParams = urlParams.has('code') || urlParams.has('access_token') || urlParams.has('error');
    const hasFragmentAuthParams = hashParams.has('access_token') || hashParams.has('refresh_token') || hashParams.has('error');
    
    console.log('检查认证参数:', {
      search: Object.fromEntries(urlParams),
      fragment: Object.fromEntries(hashParams),
      hasSearchAuthParams,
      hasFragmentAuthParams
    });
    
    if (hasSearchAuthParams || hasFragmentAuthParams) {
      console.log('发现认证参数，开始处理OAuth回调...');
      handleOAuthCallback();
    } else {
      console.log('未发现认证参数，检查现有session...');
      // 如果没有认证参数，检查是否已经登录
      supabase.auth.getSession().then(({ data: { session } }) => {
        if (session) {
          console.log('发现现有session，直接跳转...');
          showSuccess();
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1000);
        } else {
          console.log('未找到现有session');
          showError('未找到有效的登录信息，请重新登录');
        }
      });
    }
  });
</script>