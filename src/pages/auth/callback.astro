---
// OAuth回调处理页面
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="登录处理中...">
  <div class="min-h-screen flex items-center justify-center bg-gray-50">
    <div class="max-w-md w-full space-y-8 p-8">
      <div class="text-center">
        <!-- 加载动画 -->
        <div class="flex justify-center mb-6">
          <svg
            class="animate-spin h-12 w-12 text-blue-600"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
            ></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        </div>
        
        <h2 class="text-2xl font-bold text-gray-900 mb-2">
          正在处理登录...
        </h2>
        
        <p class="text-gray-600 mb-6">
          请稍候，我们正在验证您的身份信息
        </p>
        
        <!-- 状态消息 -->
        <div id="status-message" class="text-sm text-gray-500">
          正在连接到认证服务器...
        </div>
        
        <!-- 错误消息 -->
        <div id="error-message" class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span id="error-text" class="text-red-800"></span>
          </div>
          <div class="mt-3">
            <button
              id="retry-btn"
              class="text-sm bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded transition-colors"
            >
              重试
            </button>
            <a
              href="/admin/login"
              class="text-sm text-red-600 hover:text-red-800 ml-3 underline"
            >
              返回登录页
            </a>
          </div>
        </div>
        
        <!-- 成功消息 -->
        <div id="success-message" class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-green-800">登录成功！正在跳转...</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { supabase } from '../../lib/supabase';
  import { syncUserToDatabase } from '../../lib/auth';

  // 获取DOM元素
  const statusMessage = document.getElementById('status-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');
  const successMessage = document.getElementById('success-message');
  const retryBtn = document.getElementById('retry-btn');

  // 更新状态消息
  function updateStatus(message: string) {
    if (statusMessage) {
      statusMessage.textContent = message;
    }
  }

  // 显示错误消息
  function showError(message: string) {
    if (errorMessage && errorText) {
      errorText.textContent = message;
      errorMessage.classList.remove('hidden');
    }
    if (statusMessage) {
      statusMessage.classList.add('hidden');
    }
  }

  // 显示成功消息
  function showSuccess() {
    if (successMessage) {
      successMessage.classList.remove('hidden');
    }
    if (statusMessage) {
      statusMessage.classList.add('hidden');
    }
  }

  // 处理OAuth回调
  async function handleOAuthCallback() {
    try {
      updateStatus('正在验证登录状态...');

      // 处理OAuth回调
      const { data, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('获取会话失败:', error);
        throw new Error(`认证失败: ${error.message}`);
      }

      if (!data.session || !data.session.user) {
        throw new Error('未找到有效的登录会话');
      }

      const user = data.session.user;
      console.log('用户登录成功:', user.email);

      updateStatus('正在同步用户数据...');

      // 同步用户数据到数据库
      try {
        await syncUserToDatabase(user);
        console.log('用户数据同步成功');
      } catch (syncError) {
        console.warn('用户数据同步失败，但登录成功:', syncError);
        // 即使同步失败，也继续登录流程
      }

      updateStatus('登录成功，正在跳转...');
      showSuccess();

      // 获取重定向URL
      const urlParams = new URLSearchParams(window.location.search);
      const redirectTo = urlParams.get('redirect_to') || '/dashboard';

      // 延迟跳转，让用户看到成功消息
      setTimeout(() => {
        window.location.href = redirectTo;
      }, 1500);

    } catch (error) {
      console.error('OAuth回调处理失败:', error);
      showError(error instanceof Error ? error.message : '登录处理失败，请重试');
    }
  }

  // 重试按钮事件
  if (retryBtn) {
    retryBtn.addEventListener('click', () => {
      // 隐藏错误消息
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
      if (statusMessage) {
        statusMessage.classList.remove('hidden');
      }
      
      // 重新处理回调
      handleOAuthCallback();
    });
  }

  // 页面加载时处理OAuth回调
  document.addEventListener('DOMContentLoaded', () => {
    // 检查URL中是否包含认证相关参数
    const urlParams = new URLSearchParams(window.location.search);
    const hasAuthParams = urlParams.has('code') || urlParams.has('access_token') || urlParams.has('error');
    
    if (hasAuthParams) {
      handleOAuthCallback();
    } else {
      // 如果没有认证参数，检查是否已经登录
      supabase.auth.getSession().then(({ data: { session } }) => {
        if (session) {
          showSuccess();
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1000);
        } else {
          showError('未找到有效的登录信息，请重新登录');
        }
      });
    }
  });
</script>