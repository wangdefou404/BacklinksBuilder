---
import BaseLayout from '../../layouts/BaseLayout.astro';
import RoleGuard from '../../components/auth/RoleGuard.astro';

// 检查用户会话
const session = Astro.cookies.get('session')?.value;
if (!session) {
  return Astro.redirect('/login');
}

let user;
try {
  // 先解码URL编码的字符串，再解析JSON
  const decodedSession = decodeURIComponent(session);
  user = JSON.parse(decodedSession);
} catch (error) {
  return Astro.redirect('/login');
}
---

<BaseLayout title="订阅管理 - 管理员面板">
  <RoleGuard allowedRoles={['admin']} showError={true}>
    <div class="min-h-screen bg-gray-50 py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page title -->
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900">Subscription Management</h1>
          <p class="mt-2 text-gray-600">Manage user subscription plans and payment status</p>
        </div>

        <!-- Subscription statistics cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Active Subscriptions</p>
                <p class="text-2xl font-semibold text-gray-900" id="activeSubscriptions">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Monthly Revenue</p>
                <p class="text-2xl font-semibold text-gray-900" id="monthlyRevenue">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-yellow-100 rounded-lg">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Expiring Soon</p>
                <p class="text-2xl font-semibold text-gray-900" id="expiringSubscriptions">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-red-100 rounded-lg">
                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Cancelled</p>
                <p class="text-2xl font-semibold text-gray-900" id="cancelledSubscriptions">-</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Subscription plan management -->
        <div class="bg-white rounded-lg shadow mb-8">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex justify-between items-center">
              <h2 class="text-lg font-medium text-gray-900">Subscription Plans</h2>
              <button 
                id="addPlanBtn"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
              >
                Add Plan
              </button>
            </div>
          </div>
          <div class="p-6">
            <div id="plansContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <!-- Plan cards will be dynamically loaded here -->
            </div>
          </div>
        </div>

        <!-- User subscriptions -->
        <div class="bg-white rounded-lg shadow">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex justify-between items-center">
              <h2 class="text-lg font-medium text-gray-900">User Subscriptions</h2>
              <div class="flex space-x-4">
                <!-- Search box -->
                <div class="relative">
                  <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search users..." 
                    class="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  >
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </div>
                </div>
                
                <!-- Status filter -->
                <select id="statusFilter" class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="">All Status</option>
                  <option value="active">Active</option>
                  <option value="cancelled">Cancelled</option>
                  <option value="expired">Expired</option>
                </select>
                
                <!-- Plan filter -->
                <select id="planFilter" class="border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="">All Plans</option>
                  <!-- Plan options will be dynamically loaded -->
                </select>
                
                <button id="refreshBtn" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                  Refresh
                </button>
              </div>
            </div>
          </div>
          
          <!-- Loading state -->
          <div id="loadingState" class="p-8 text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p class="mt-2 text-gray-600">Loading...</p>
          </div>
          
          <!-- Subscription table -->
          <div id="subscriptionTable" class="hidden">
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Plan</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payment Method</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody id="subscriptionTableBody" class="bg-white divide-y divide-gray-200">
                  <!-- Subscription data will be dynamically loaded here -->
                </tbody>
              </table>
            </div>
            
            <!-- Pagination -->
            <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
              <div class="flex-1 flex justify-between sm:hidden">
                <button id="prevPageBtnMobile" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Previous</button>
                <button id="nextPageBtnMobile" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Next</button>
              </div>
              <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                  <p class="text-sm text-gray-700">
                    Showing <span id="pageStart" class="font-medium">1</span> to <span id="pageEnd" class="font-medium">10</span> of
                    <span id="totalSubscriptions" class="font-medium">0</span> subscriptions
                  </p>
                </div>
                <div>
                  <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                    <button id="prevPageBtn" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                      Previous
                    </button>
                    <button id="nextPageBtn" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                      Next
                    </button>
                  </nav>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Error state -->
          <div id="errorState" class="hidden p-8 text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">Loading Failed</h3>
            <p class="mt-1 text-sm text-gray-500">Unable to load subscription data, please try again later.</p>
            <div class="mt-6">
              <button id="retryBtn" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                Retry
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Subscription details modal -->
    <div id="subscriptionModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900">Subscription Details</h3>
            <button id="closeSubscriptionModal" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div id="subscriptionDetails" class="space-y-4">
            <!-- Subscription details content will be dynamically loaded here -->
          </div>
          
          <div class="mt-6 flex justify-end space-x-3">
            <button id="cancelSubscriptionBtn" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors">
              Cancel Subscription
            </button>
            <button id="closeSubscriptionModalBtn" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
              Close
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- 添加/编辑计划模态框 -->
    <div id="planModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex justify-between items-center mb-4">
            <h3 id="planModalTitle" class="text-lg font-medium text-gray-900">添加订阅计划</h3>
            <button id="closePlanModal" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <form id="planForm" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Plan Name</label>
              <input type="text" id="planName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Display Name</label>
              <input type="text" id="planDisplayName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">User Role</label>
              <select id="planRole" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required>
                <option value="user">Regular User</option>
                <option value="Pro">Pro User</option>
                <option value="super">Super User</option>
              </select>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Billing Cycle</label>
                <select id="planBillingCycle" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required>
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Price ($)</label>
                <input type="number" id="planPrice" step="0.01" min="0" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required>
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Feature Description</label>
              <textarea id="planFeatures" rows="3" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500" placeholder="One feature per line"></textarea>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <textarea id="planDescription" rows="2" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
            </div>
            
            <div class="flex items-center">
              <input type="checkbox" id="planActive" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
              <label for="planActive" class="ml-2 block text-sm text-gray-900">Enable this plan</label>
            </div>
          </form>
          
          <div class="mt-6 flex justify-end space-x-3">
            <button id="savePlanBtn" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
              Save
            </button>
            <button id="cancelPlanBtn" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </RoleGuard>
</BaseLayout>

<script is:inline>
  let currentPage = 1;
  let pageSize = 10;
  let totalPages = 1;
  let currentSubscriptionId = null;
  let currentPlanId = null;
  let subscriptionPlans = [];
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    loadSubscriptionStats();
    loadSubscriptionPlans();
    loadSubscriptions();
    
    // Bind event listeners
    bindEventListeners();
  });
  
  function bindEventListeners() {
    // Refresh button
    document.getElementById('refreshBtn').addEventListener('click', () => {
      loadSubscriptionStats();
      loadSubscriptions();
    });
    
    // Search
    document.getElementById('searchInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') loadSubscriptions();
    });
    
    // Filter
    document.getElementById('statusFilter').addEventListener('change', loadSubscriptions);
    document.getElementById('planFilter').addEventListener('change', loadSubscriptions);
    
    // Pagination
    document.getElementById('prevPageBtn').addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        loadSubscriptions();
      }
    });
    
    document.getElementById('nextPageBtn').addEventListener('click', () => {
      if (currentPage < totalPages) {
        currentPage++;
        loadSubscriptions();
      }
    });
    
    // Retry button
    document.getElementById('retryBtn').addEventListener('click', loadSubscriptions);
    
    // Add plan button
    document.getElementById('addPlanBtn').addEventListener('click', () => {
      openPlanModal();
    });
    
    // Modal events
    document.getElementById('closeSubscriptionModal').addEventListener('click', closeSubscriptionModal);
    document.getElementById('closeSubscriptionModalBtn').addEventListener('click', closeSubscriptionModal);
    document.getElementById('closePlanModal').addEventListener('click', closePlanModal);
    document.getElementById('cancelPlanBtn').addEventListener('click', closePlanModal);
    document.getElementById('savePlanBtn').addEventListener('click', savePlan);
    
    // Close modal when clicking outside
    document.getElementById('subscriptionModal').addEventListener('click', (e) => {
      if (e.target.id === 'subscriptionModal') closeSubscriptionModal();
    });
    
    document.getElementById('planModal').addEventListener('click', (e) => {
      if (e.target.id === 'planModal') closePlanModal();
    });
  }
  
  // Load subscription statistics
  async function loadSubscriptionStats() {
    try {
      const response = await fetch('/api/admin/subscription-stats');
      if (response.ok) {
        const stats = await response.json();
        document.getElementById('activeSubscriptions').textContent = stats.active || 0;
        document.getElementById('monthlyRevenue').textContent = `$${(stats.monthlyRevenue || 0).toFixed(2)}`;
        document.getElementById('expiringSubscriptions').textContent = stats.expiring || 0;
        document.getElementById('cancelledSubscriptions').textContent = stats.cancelled || 0;
      }
    } catch (error) {
      console.error('Failed to load subscription stats:', error);
    }
  }
  
  // Load subscription plans
  async function loadSubscriptionPlans() {
    try {
      const response = await fetch('/api/admin/subscription-plans');
      if (response.ok) {
        subscriptionPlans = await response.json();
        displaySubscriptionPlans(subscriptionPlans);
        updatePlanFilter(subscriptionPlans);
      }
    } catch (error) {
      console.error('Failed to load subscription plans:', error);
    }
  }
  
  // Display subscription plans
  function displaySubscriptionPlans(plans) {
    const container = document.getElementById('plansContainer');
    container.innerHTML = '';
    
    plans.forEach(plan => {
      const planCard = createPlanCard(plan);
      container.appendChild(planCard);
    });
  }
  
  // Create plan card
  function createPlanCard(plan) {
    const div = document.createElement('div');
    div.className = `border rounded-lg p-4 ${plan.is_active ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`;
    
    div.innerHTML = `
      <div class="flex justify-between items-start mb-2">
        <h3 class="text-lg font-medium text-gray-900">${plan.display_name}</h3>
        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
          plan.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
        }">
          ${plan.is_active ? 'Enabled' : 'Disabled'}
        </span>
      </div>
      <p class="text-2xl font-bold text-gray-900 mb-2">$${plan.price}/${plan.billing_cycle === 'monthly' ? 'Month' : 'Year'}</p>
      <p class="text-sm text-gray-600 mb-3">${plan.description || ''}</p>
      <div class="flex justify-between items-center">
        <span class="text-sm text-gray-500">Role: ${getRoleDisplayName(plan.role)}</span>
        <div class="space-x-2">
          <button onclick="editPlan('${plan.id}')" class="text-blue-600 hover:text-blue-900 text-sm">
            Edit
          </button>
          <button onclick="togglePlan('${plan.id}', ${!plan.is_active})" class="text-${plan.is_active ? 'red' : 'green'}-600 hover:text-${plan.is_active ? 'red' : 'green'}-900 text-sm">
            ${plan.is_active ? 'Disable' : 'Enable'}
          </button>
        </div>
      </div>
    `;
    
    return div;
  }
  
  // Update plan filter
  function updatePlanFilter(plans) {
    const select = document.getElementById('planFilter');
    // Clear existing options (keep "All Plans")
    while (select.children.length > 1) {
      select.removeChild(select.lastChild);
    }
    
    plans.forEach(plan => {
      const option = document.createElement('option');
      option.value = plan.id;
      option.textContent = plan.display_name;
      select.appendChild(option);
    });
  }
  
  // Load subscription list
  async function loadSubscriptions() {
    showLoadingState();
    
    try {
      const searchTerm = document.getElementById('searchInput').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const planFilter = document.getElementById('planFilter').value;
      
      const params = new URLSearchParams({
        page: currentPage,
        pageSize: pageSize,
        search: searchTerm,
        status: statusFilter,
        planId: planFilter
      });
      
      const response = await fetch(`/api/admin/subscriptions?${params}`);
      if (response.ok) {
        const data = await response.json();
        displaySubscriptions(data.subscriptions);
        updatePagination(data.pagination);
        showSubscriptionTable();
      } else {
        showErrorState();
      }
    } catch (error) {
      console.error('Failed to load subscriptions:', error);
      showErrorState();
    }
  }
  
  // Display subscription list
  function displaySubscriptions(subscriptions) {
    const tbody = document.getElementById('subscriptionTableBody');
    tbody.innerHTML = '';
    
    subscriptions.forEach(subscription => {
      const row = createSubscriptionRow(subscription);
      tbody.appendChild(row);
    });
  }
  
  // Create subscription row
  function createSubscriptionRow(subscription) {
    const tr = document.createElement('tr');
    tr.className = 'hover:bg-gray-50';
    
    const statusColors = {
      active: 'bg-green-100 text-green-800',
      cancelled: 'bg-red-100 text-red-800',
      expired: 'bg-gray-100 text-gray-800'
    };
    
    tr.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
            <span class="text-sm font-medium text-gray-700">${subscription.username ? subscription.username.charAt(0).toUpperCase() : 'U'}</span>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900">${subscription.username || 'Unknown User'}</div>
            <div class="text-sm text-gray-500">${subscription.email || 'No Email'}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">${subscription.plan_display_name}</div>
        <div class="text-sm text-gray-500">$${subscription.plan_price}/${subscription.plan_billing_cycle === 'monthly' ? 'Month' : 'Year'}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusColors[subscription.status] || 'bg-gray-100 text-gray-800'}">
          ${getStatusDisplayName(subscription.status)}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${formatDate(subscription.start_date)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${formatDate(subscription.end_date)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        ${subscription.payment_method || '-'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button onclick="viewSubscriptionDetails('${subscription.id}')" class="text-blue-600 hover:text-blue-900 mr-3">
          View Details
        </button>
        ${subscription.status === 'active' ? `
          <button onclick="cancelSubscription('${subscription.id}')" class="text-red-600 hover:text-red-900">
            Cancel Subscription
          </button>
        ` : ''}
      </td>
    `;
    
    return tr;
  }
  
  // Helper functions
  function getRoleDisplayName(role) {
    const roleNames = {
      free: 'Free User',
      user: 'Regular User',
      Pro: 'Pro User',
      super: 'Super User',
      admin: 'Administrator'
    };
    return roleNames[role] || role;
  }
  
  function getStatusDisplayName(status) {
    const statusNames = {
      active: 'Active',
      cancelled: 'Cancelled',
      expired: 'Expired'
    };
    return statusNames[status] || status;
  }
  
  function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN');
  }
  
  // State management
  function showLoadingState() {
    document.getElementById('loadingState').classList.remove('hidden');
    document.getElementById('subscriptionTable').classList.add('hidden');
    document.getElementById('errorState').classList.add('hidden');
  }
  
  function showSubscriptionTable() {
    document.getElementById('loadingState').classList.add('hidden');
    document.getElementById('subscriptionTable').classList.remove('hidden');
    document.getElementById('errorState').classList.add('hidden');
  }
  
  function showErrorState() {
    document.getElementById('loadingState').classList.add('hidden');
    document.getElementById('subscriptionTable').classList.add('hidden');
    document.getElementById('errorState').classList.remove('hidden');
  }
  
  // Pagination update
  function updatePagination(pagination) {
    totalPages = pagination.totalPages;
    document.getElementById('pageStart').textContent = (currentPage - 1) * pageSize + 1;
    document.getElementById('pageEnd').textContent = Math.min(currentPage * pageSize, pagination.total);
    document.getElementById('totalSubscriptions').textContent = pagination.total;
    
    document.getElementById('prevPageBtn').disabled = currentPage <= 1;
    document.getElementById('nextPageBtn').disabled = currentPage >= totalPages;
  }
  
  // Modal management
  function openPlanModal(planId = null) {
    currentPlanId = planId;
    const modal = document.getElementById('planModal');
    const title = document.getElementById('planModalTitle');
    
    if (planId) {
      title.textContent = 'Edit Subscription Plan';
      const plan = subscriptionPlans.find(p => p.id === planId);
      if (plan) {
        document.getElementById('planName').value = plan.name;
        document.getElementById('planDisplayName').value = plan.display_name;
        document.getElementById('planRole').value = plan.role;
        document.getElementById('planBillingCycle').value = plan.billing_cycle;
        document.getElementById('planPrice').value = plan.price;
        document.getElementById('planFeatures').value = plan.features || '';
        document.getElementById('planDescription').value = plan.description || '';
        document.getElementById('planActive').checked = plan.is_active;
      }
    } else {
      title.textContent = 'Add Subscription Plan';
      document.getElementById('planForm').reset();
      document.getElementById('planActive').checked = true;
    }
    
    modal.classList.remove('hidden');
  }
  
  function closePlanModal() {
    document.getElementById('planModal').classList.add('hidden');
    currentPlanId = null;
  }
  
  function closeSubscriptionModal() {
    document.getElementById('subscriptionModal').classList.add('hidden');
    currentSubscriptionId = null;
  }
  
  // Plan operations
  async function savePlan() {
    const formData = {
      name: document.getElementById('planName').value,
      display_name: document.getElementById('planDisplayName').value,
      role: document.getElementById('planRole').value,
      billing_cycle: document.getElementById('planBillingCycle').value,
      price: parseFloat(document.getElementById('planPrice').value),
      features: document.getElementById('planFeatures').value,
      description: document.getElementById('planDescription').value,
      is_active: document.getElementById('planActive').checked
    };
    
    try {
      const url = currentPlanId ? `/api/admin/subscription-plans/${currentPlanId}` : '/api/admin/subscription-plans';
      const method = currentPlanId ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        closePlanModal();
        loadSubscriptionPlans();
        alert(currentPlanId ? 'Plan updated successfully' : 'Plan created successfully');
      } else {
        const error = await response.json();
        alert('Operation failed: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Failed to save plan:', error);
      alert('Operation failed: Network error');
    }
  }
  
  function editPlan(planId) {
    openPlanModal(planId);
  }
  
  async function togglePlan(planId, isActive) {
    try {
      const response = await fetch(`/api/admin/subscription-plans/${planId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ is_active: isActive })
      });
      
      if (response.ok) {
        loadSubscriptionPlans();
        alert(isActive ? 'Plan enabled' : 'Plan disabled');
      } else {
        const error = await response.json();
        alert('Operation failed: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Failed to toggle plan:', error);
      alert('Operation failed: Network error');
    }
  }
  
  // Subscription operations
  async function viewSubscriptionDetails(subscriptionId) {
    currentSubscriptionId = subscriptionId;
    
    try {
      const response = await fetch(`/api/admin/subscriptions/${subscriptionId}`);
      if (response.ok) {
        const subscription = await response.json();
        displaySubscriptionDetails(subscription);
        document.getElementById('subscriptionModal').classList.remove('hidden');
      } else {
        alert('Unable to load subscription details');
      }
    } catch (error) {
      console.error('Failed to load subscription details:', error);
      alert('Loading failed: Network error');
    }
  }
  
  function displaySubscriptionDetails(subscription) {
    const container = document.getElementById('subscriptionDetails');
    container.innerHTML = `
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">User Information</label>
          <p class="mt-1 text-sm text-gray-900">${subscription.username} (${subscription.email})</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Subscription Plan</label>
          <p class="mt-1 text-sm text-gray-900">${subscription.plan_display_name}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Status</label>
          <p class="mt-1 text-sm text-gray-900">${getStatusDisplayName(subscription.status)}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Price</label>
          <p class="mt-1 text-sm text-gray-900">$${subscription.plan_price}/${subscription.plan_billing_cycle === 'monthly' ? 'month' : 'year'}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Start Date</label>
          <p class="mt-1 text-sm text-gray-900">${formatDate(subscription.start_date)}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">End Date</label>
          <p class="mt-1 text-sm text-gray-900">${formatDate(subscription.end_date)}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Payment Method</label>
          <p class="mt-1 text-sm text-gray-900">${subscription.payment_method || '-'}</p>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700">Auto Renew</label>
          <p class="mt-1 text-sm text-gray-900">${subscription.auto_renew ? 'Yes' : 'No'}</p>
        </div>
      </div>
      ${subscription.notes ? `
        <div class="mt-4">
          <label class="block text-sm font-medium text-gray-700">Notes</label>
          <p class="mt-1 text-sm text-gray-900">${subscription.notes}</p>
        </div>
      ` : ''}
    `;
  }
  
  async function cancelSubscription(subscriptionId) {
    if (!confirm('Are you sure you want to cancel this subscription? This action cannot be undone.')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/cancel`, {
        method: 'POST'
      });
      
      if (response.ok) {
        loadSubscriptions();
        loadSubscriptionStats();
        alert('Subscription cancelled');
      } else {
        const error = await response.json();
        alert('Cancellation failed: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Failed to cancel subscription:', error);
      alert('Cancellation failed: Network error');
    }
  }
</script>

<style>
  .transition-colors {
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
</style>