---
import BaseLayout from '../../layouts/BaseLayout.astro';
import RoleGuard from '../../components/auth/RoleGuard.astro';
import Footer from '../../components/global/Footer.astro';

// Get user session information
const session = Astro.locals.session;
const user = Astro.locals.user;

// If user is not logged in, redirect to login page
if (!session || !user) {
  return Astro.redirect('/login?redirect=/admin/logs');
}

const userId = user.id;

// Get user role information
let userRole = null;
try {
  const response = await fetch(`${Astro.url.origin}/api/auth/get-user-role`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId })
  });

  if (response.ok) {
    userRole = await response.json();
  }
} catch (error) {
  console.error('Role fetch error:', error);
}

// Get log data
let logsData = {
  systemLogs: [
    {
      id: 1,
      timestamp: '2024-01-07 14:30:25',
      level: 'INFO',
      category: 'SYSTEM',
      message: 'System startup completed',
      source: 'server.js',
      details: 'All services have been successfully started'
    },
    {
      id: 2,
      timestamp: '2024-01-07 14:25:18',
      level: 'WARNING',
      category: 'DATABASE',
      message: 'Database connection pool approaching limit',
      source: 'database.js',
      details: 'Current connections: 95/100'
    },
    {
      id: 3,
      timestamp: '2024-01-07 14:20:42',
      level: 'ERROR',
      category: 'API',
      message: 'API request timeout',
      source: 'api/check.js',
      details: 'Request timeout after 30s for domain: slow-website.com'
    },
    {
      id: 4,
      timestamp: '2024-01-07 14:15:33',
      level: 'INFO',
      category: 'AUTH',
      message: 'User login successful',
      source: 'auth.js',
      details: 'User: user@example.com, IP: 192.168.1.100'
    },
    {
      id: 5,
      timestamp: '2024-01-07 14:10:15',
      level: 'DEBUG',
      category: 'CACHE',
      message: 'Cache cleanup completed',
      source: 'cache.js',
      details: 'Cleaned up 1,234 expired cache items'
    }
  ],
  userActivities: [
    {
      id: 1,
      timestamp: '2024-01-07 14:32:10',
      userId: 'user123',
      email: 'john@example.com',
      action: 'LOGIN',
      resource: '/dashboard',
      ip: '192.168.1.100',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      status: 'SUCCESS'
    },
    {
      id: 2,
      timestamp: '2024-01-07 14:28:45',
      userId: 'user456',
      email: 'jane@test.com',
      action: 'CHECK_BACKLINKS',
      resource: '/api/check',
      ip: '10.0.0.50',
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
      status: 'SUCCESS'
    },
    {
      id: 3,
      timestamp: '2024-01-07 14:25:22',
      userId: 'user789',
      email: 'admin@site.com',
      action: 'UPDATE_SETTINGS',
      resource: '/admin/settings',
      ip: '172.16.0.10',
      userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
      status: 'SUCCESS'
    },
    {
      id: 4,
      timestamp: '2024-01-07 14:22:18',
      userId: 'user321',
      email: 'test@demo.org',
      action: 'FAILED_LOGIN',
      resource: '/login',
      ip: '203.0.113.45',
      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)',
      status: 'FAILED'
    },
    {
      id: 5,
      timestamp: '2024-01-07 14:18:55',
      userId: 'user654',
      email: 'premium@user.net',
      action: 'UPGRADE_SUBSCRIPTION',
      resource: '/api/subscription',
      ip: '198.51.100.25',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0)',
      status: 'SUCCESS'
    }
  ],
  errorLogs: [
    {
      id: 1,
      timestamp: '2024-01-07 14:35:42',
      level: 'CRITICAL',
      error: 'DatabaseConnectionError',
      message: 'Unable to connect to main database',
      stack: 'Error: Connection timeout\n    at Database.connect (/app/lib/database.js:45:12)',
      url: '/api/users',
      method: 'GET',
      userId: 'user123',
      resolved: false
    },
    {
      id: 2,
      timestamp: '2024-01-07 14:30:18',
      level: 'ERROR',
      error: 'ValidationError',
      message: 'Invalid email format',
      stack: 'ValidationError: Invalid email format\n    at validateEmail (/app/utils/validation.js:23:8)',
      url: '/api/auth/register',
      method: 'POST',
      userId: null,
      resolved: true
    },
    {
      id: 3,
      timestamp: '2024-01-07 14:25:33',
      level: 'ERROR',
      error: 'TimeoutError',
      message: 'API request timeout',
      stack: 'TimeoutError: Request timeout after 30000ms\n    at Timeout._onTimeout (/app/lib/http.js:156:9)',
      url: '/api/check/backlinks',
      method: 'POST',
      userId: 'user456',
      resolved: false
    },
    {
      id: 4,
      timestamp: '2024-01-07 14:20:15',
      level: 'WARNING',
      error: 'RateLimitError',
      message: 'Request rate limit exceeded',
      stack: 'RateLimitError: Too many requests\n    at rateLimiter (/app/middleware/rateLimit.js:34:10)',
      url: '/api/check',
      method: 'POST',
      userId: 'user789',
      resolved: true
    },
    {
      id: 5,
      timestamp: '2024-01-07 14:15:28',
      level: 'ERROR',
      error: 'AuthenticationError',
      message: 'Invalid access token',
      stack: 'AuthenticationError: Invalid token\n    at verifyToken (/app/middleware/auth.js:67:12)',
      url: '/api/admin/users',
      method: 'GET',
      userId: null,
      resolved: true
    }
  ]
};

try {
  const logsResponse = await fetch(`${Astro.url.origin}/api/admin/logs`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    }
  });

  if (logsResponse.ok) {
    const result = await logsResponse.json();
    logsData = { ...logsData, ...result.data };
  }
} catch (error) {
  console.error('Logs fetch error:', error);
}
---

<BaseLayout title="Log Monitoring - Admin Panel">
  <main class="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Page title and navigation -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <a href="/admin/dashboard" class="text-purple-600 hover:text-purple-800 mr-4">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </a>
            <svg class="w-8 h-8 text-purple-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Log Monitoring</h1>
              <p class="mt-2 text-gray-600">System logs, user activities and error monitoring</p>
            </div>
          </div>
          <div class="flex space-x-3">
            <button 
              onclick="refreshLogs()"
              class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh Logs
            </button>
            <button 
              onclick="exportLogs()"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Export Logs
            </button>
            <button 
              onclick="clearLogs()"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-colors"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
              Clear Logs
            </button>
          </div>
        </div>
      </div>

      <!-- Role guard -->
      <RoleGuard allowedRoles={['admin', 'super']} userId={userId}>
        
        <!-- Log statistics overview -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-3 bg-blue-100 rounded-full">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">System Logs</p>
                <p class="text-2xl font-bold text-gray-900">{logsData.systemLogs.length}</p>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-3 bg-green-100 rounded-full">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">User Activities</p>
                <p class="text-2xl font-bold text-gray-900">{logsData.userActivities.length}</p>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-3 bg-red-100 rounded-full">
                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Error Logs</p>
                <p class="text-2xl font-bold text-gray-900">{logsData.errorLogs.length}</p>
              </div>
            </div>
          </div>
          
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-3 bg-yellow-100 rounded-full">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Unresolved Errors</p>
                <p class="text-2xl font-bold text-gray-900">{logsData.errorLogs.filter(log => !log.resolved).length}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Filter and search -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Log Type</label>
              <select 
                id="logType"
                onchange="filterLogs()"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Logs</option>
                <option value="system">System Logs</option>
                <option value="user">User Activities</option>
                <option value="error">Error Logs</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Log Level</label>
              <select 
                id="logLevel"
                onchange="filterLogs()"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Levels</option>
                <option value="DEBUG">DEBUG</option>
                <option value="INFO">INFO</option>
                <option value="WARNING">WARNING</option>
                <option value="ERROR">ERROR</option>
                <option value="CRITICAL">CRITICAL</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Time Range</label>
              <select 
                id="timeRange"
                onchange="filterLogs()"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="1h">Last 1 Hour</option>
                <option value="24h" selected>Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
              <input 
                type="text" 
                id="searchInput"
                placeholder="Search log content..."
                oninput="filterLogs()"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
            </div>
          </div>
        </div>

        <!-- Log tabs -->
        <div class="bg-white rounded-lg shadow">
          <div class="border-b border-gray-200">
            <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
              <button 
                onclick="switchTab('system')"
                id="tab-system"
                class="tab-button active border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
              >
                System Logs
              </button>
              <button 
                onclick="switchTab('user')"
                id="tab-user"
                class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
              >
                User Activities
              </button>
              <button 
                onclick="switchTab('error')"
                id="tab-error"
                class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
              >
                Error Logs
              </button>
            </nav>
          </div>

          <!-- System logs tab -->
          <div id="content-system" class="tab-content">
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {logsData.systemLogs.map((log, index) => (
                    <tr key={index} class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {log.timestamp}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                          log.level === 'ERROR' ? 'bg-red-100 text-red-800' :
                          log.level === 'WARNING' ? 'bg-yellow-100 text-yellow-800' :
                          log.level === 'INFO' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {log.level}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {log.category}
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-900">
                        {log.message}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {log.source}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button 
                          onclick={`viewLogDetails('system', ${log.id})`}
                          class="text-blue-600 hover:text-blue-900 mr-3"
                        >
                          View Details
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          <!-- User activities tab -->
          <div id="content-user" class="tab-content hidden">
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Resource</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {logsData.userActivities.map((activity, index) => (
                    <tr key={index} class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {activity.timestamp}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        <div>
                          <div class="font-medium">{activity.email}</div>
                          <div class="text-gray-500">{activity.userId}</div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {activity.action}
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-900">
                        {activity.resource}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {activity.ip}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                          activity.status === 'SUCCESS' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {activity.status}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button 
                          onclick={`viewLogDetails('user', ${activity.id})`}
                          class="text-blue-600 hover:text-blue-900 mr-3"
                        >
                          View Details
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          <!-- Error logs tab -->
          <div id="content-error" class="tab-content hidden">
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Error Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {logsData.errorLogs.map((error, index) => (
                    <tr key={index} class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {error.timestamp}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                          error.level === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                          error.level === 'ERROR' ? 'bg-orange-100 text-orange-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {error.level}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {error.error}
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-900">
                        {error.message}
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-500">
                        {error.url}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                          error.resolved ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {error.resolved ? 'Resolved' : 'Unresolved'}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button 
                          onclick={`viewLogDetails('error', ${error.id})`}
                          class="text-blue-600 hover:text-blue-900 mr-3"
                        >
                          View Details
                        </button>
                        {!error.resolved && (
                          <button 
                            onclick={`markAsResolved(${error.id})`}
                            class="text-green-600 hover:text-green-900"
                          >
                            Mark Resolved
                          </button>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

      </RoleGuard>
    </div>
  </main>

  <!-- Log details modal -->
  <div id="logDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Log Details</h3>
        <button onclick="closeLogDetails()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="logDetailsContent" class="space-y-4">
        <!-- Log details content will be dynamically loaded here -->
      </div>
    </div>
  </div>

  <Footer />
</BaseLayout>

<script define:vars={{ logsData }}>
  let currentTab = 'system';
  let allLogs = logsData;

  // Tab switching
  function switchTab(tab) {
    // Update tab button status
    document.querySelectorAll('.tab-button').forEach(btn => {
      btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
      btn.classList.add('border-transparent', 'text-gray-500');
    });
    
    document.getElementById(`tab-${tab}`).classList.add('active', 'border-blue-500', 'text-blue-600');
    document.getElementById(`tab-${tab}`).classList.remove('border-transparent', 'text-gray-500');

    // Show corresponding content
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.add('hidden');
    });
    
    document.getElementById(`content-${tab}`).classList.remove('hidden');
    currentTab = tab;
  }

  // Filter logs
  function filterLogs() {
    const logType = document.getElementById('logType').value;
    const logLevel = document.getElementById('logLevel').value;
    const timeRange = document.getElementById('timeRange').value;
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();

    // Should call API to re-fetch filtered data here
    console.log('Filter conditions:', { logType, logLevel, timeRange, searchTerm });
    
    // Simulate filtering effect
    if (logType !== 'all') {
      switchTab(logType);
    }
  }

  // View log details
  function viewLogDetails(type, id) {
    let logData;
    
    switch (type) {
      case 'system':
        logData = allLogs.systemLogs.find(log => log.id === id);
        break;
      case 'user':
        logData = allLogs.userActivities.find(log => log.id === id);
        break;
      case 'error':
        logData = allLogs.errorLogs.find(log => log.id === id);
        break;
    }

    if (!logData) return;

    const content = document.getElementById('logDetailsContent');
    
    if (type === 'system') {
      content.innerHTML = `
        <div class="grid grid-cols-2 gap-4">
          <div><strong>Time:</strong> ${logData.timestamp}</div>
          <div><strong>Level:</strong> <span class="px-2 py-1 text-xs rounded-full ${getLogLevelClass(logData.level)}">${logData.level}</span></div>
          <div><strong>Category:</strong> ${logData.category}</div>
          <div><strong>Source:</strong> ${logData.source}</div>
        </div>
        <div class="mt-4">
          <strong>Message:</strong>
          <p class="mt-2 p-3 bg-gray-50 rounded">${logData.message}</p>
        </div>
        <div class="mt-4">
          <strong>Details:</strong>
          <p class="mt-2 p-3 bg-gray-50 rounded">${logData.details}</p>
        </div>
      `;
    } else if (type === 'user') {
      content.innerHTML = `
        <div class="grid grid-cols-2 gap-4">
          <div><strong>Time:</strong> ${logData.timestamp}</div>
          <div><strong>Status:</strong> <span class="px-2 py-1 text-xs rounded-full ${logData.status === 'SUCCESS' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${logData.status}</span></div>
          <div><strong>User ID:</strong> ${logData.userId}</div>
          <div><strong>Email:</strong> ${logData.email}</div>
          <div><strong>Action:</strong> ${logData.action}</div>
          <div><strong>IP Address:</strong> ${logData.ip}</div>
        </div>
        <div class="mt-4">
          <strong>Resource:</strong>
          <p class="mt-2 p-3 bg-gray-50 rounded">${logData.resource}</p>
        </div>
        <div class="mt-4">
          <strong>User Agent:</strong>
          <p class="mt-2 p-3 bg-gray-50 rounded text-sm">${logData.userAgent}</p>
        </div>
      `;
    } else if (type === 'error') {
      content.innerHTML = `
        <div class="grid grid-cols-2 gap-4">
          <div><strong>Time:</strong> ${logData.timestamp}</div>
          <div><strong>Level:</strong> <span class="px-2 py-1 text-xs rounded-full ${getLogLevelClass(logData.level)}">${logData.level}</span></div>
          <div><strong>Error Type:</strong> ${logData.error}</div>
          <div><strong>Status:</strong> <span class="px-2 py-1 text-xs rounded-full ${logData.resolved ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">${logData.resolved ? 'Resolved' : 'Unresolved'}</span></div>
          <div><strong>URL:</strong> ${logData.url}</div>
          <div><strong>Method:</strong> ${logData.method}</div>
        </div>
        <div class="mt-4">
          <strong>Error Message:</strong>
          <p class="mt-2 p-3 bg-gray-50 rounded">${logData.message}</p>
        </div>
        <div class="mt-4">
          <strong>Stack Trace:</strong>
          <pre class="mt-2 p-3 bg-gray-50 rounded text-sm overflow-x-auto">${logData.stack}</pre>
        </div>
        ${logData.userId ? `<div class="mt-4"><strong>User ID:</strong> ${logData.userId}</div>` : ''}
      `;
    }

    document.getElementById('logDetailsModal').classList.remove('hidden');
  }

  // Close log details
  function closeLogDetails() {
    document.getElementById('logDetailsModal').classList.add('hidden');
  }

  // Get log level style
  function getLogLevelClass(level) {
    switch (level) {
      case 'CRITICAL': return 'bg-red-100 text-red-800';
      case 'ERROR': return 'bg-orange-100 text-orange-800';
      case 'WARNING': return 'bg-yellow-100 text-yellow-800';
      case 'INFO': return 'bg-blue-100 text-blue-800';
      case 'DEBUG': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  }

  // Mark error as resolved
  async function markAsResolved(errorId) {
    try {
      const response = await fetch('/api/admin/logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          action: 'mark_resolved',
          errorId: errorId
        })
      });

      if (response.ok) {
        // Update page display
        location.reload();
      } else {
        alert('Mark failed, please try again.');
      }
    } catch (error) {
      console.error('Mark error:', error);
      alert('Operation failed, please check network connection.');
    }
  }

  // Refresh logs
  async function refreshLogs() {
    try {
      const response = await fetch('/api/admin/logs?refresh=true', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        location.reload();
      } else {
        alert('Refresh failed, please try again.');
      }
    } catch (error) {
      console.error('Refresh error:', error);
      alert('Refresh failed, please check network connection.');
    }
  }

  // Export logs
  async function exportLogs() {
    try {
      const response = await fetch('/api/admin/logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'export_logs' })
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `system-logs-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        alert('Export failed, please try again.');
      }
    } catch (error) {
      console.error('Export error:', error);
      alert('Export failed, please check network connection.');
    }
  }

  // Clear logs
  async function clearLogs() {
    if (!confirm('Are you sure you want to clear old logs? This operation cannot be undone.')) {
      return;
    }

    try {
      const response = await fetch('/api/admin/logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'clear_logs' })
      });

      if (response.ok) {
        alert('Log cleanup completed.');
        location.reload();
      } else {
        alert('Cleanup failed, please try again.');
      }
    } catch (error) {
      console.error('Cleanup error:', error);
      alert('Cleanup failed, please check network connection.');
    }
  }

  // Close when clicking outside modal
  document.getElementById('logDetailsModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeLogDetails();
    }
  });
</script>

<style>
  .transition-colors {
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out, border-color 0.2s ease-in-out;
  }
  
  .tab-button.active {
    border-color: #3b82f6;
    color: #2563eb;
  }
</style>