---
import Layout from '../../layouts/BaseLayout.astro';
import RoleGuard from '../../components/auth/RoleGuard.astro';
---

<Layout title="System Settings - Admin Panel">
  <RoleGuard allowedRoles={['admin']} currentRole="admin">
    <div class="min-h-screen bg-gray-50 py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Title -->
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900">System Settings</h1>
          <p class="mt-2 text-gray-600">Manage system configuration and global settings</p>
        </div>

        <!-- Settings Card Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <!-- System Configuration -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-6 border-b border-gray-200">
              <h2 class="text-xl font-semibold text-gray-900">System Configuration</h2>
              <p class="text-sm text-gray-600 mt-1">Basic system settings and configuration</p>
            </div>
            <div class="p-6 space-y-6">
              <!-- Site Name -->
              <div>
                <label for="siteName" class="block text-sm font-medium text-gray-700 mb-2">
                  Site Name
                </label>
                <input
                  type="text"
                  id="siteName"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter site name"
                />
              </div>

              <!-- Site Description -->
              <div>
                <label for="siteDescription" class="block text-sm font-medium text-gray-700 mb-2">
                  Site Description
                </label>
                <textarea
                  id="siteDescription"
                  rows="3"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter site description"
                ></textarea>
              </div>

              <!-- Maintenance Mode -->
              <div class="flex items-center justify-between">
                <div>
                  <label class="text-sm font-medium text-gray-700">Maintenance Mode</label>
                  <p class="text-sm text-gray-500">When enabled, regular users will not be able to access the system</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="maintenanceMode" class="sr-only peer" />
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              <!-- New User Registration -->
              <div class="flex items-center justify-between">
                <div>
                  <label class="text-sm font-medium text-gray-700">Allow New User Registration</label>
                  <p class="text-sm text-gray-500">Control whether new users can register accounts</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="allowRegistration" class="sr-only peer" checked />
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              <button
                id="saveSystemConfig"
                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
              >
                Save System Configuration
              </button>
            </div>
          </div>

          <!-- Email Settings -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
              <div class="p-6 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Email Settings</h2>
                <p class="text-sm text-gray-600 mt-1">Configure email sending service</p>
              </div>
            <div class="p-6 space-y-6">
              <!-- SMTP Server -->
              <div>
                  <label for="smtpServer" class="block text-sm font-medium text-gray-700 mb-2">
                    SMTP Server
                  </label>
                <input
                  type="text"
                  id="smtpHost"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="smtp.example.com"
                />
              </div>

              <!-- SMTP Port -->
              <div>
                  <label for="smtpPort" class="block text-sm font-medium text-gray-700 mb-2">
                    SMTP Port
                  </label>
                <input
                  type="number"
                  id="smtpPort"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="587"
                />
              </div>

              <!-- From Email -->
              <div>
                  <label for="emailFrom" class="block text-sm font-medium text-gray-700 mb-2">
                    From Email
                  </label>
                <input
                  type="email"
                  id="fromEmail"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="noreply@example.com"
                />
              </div>

              <!-- Email Username -->
              <div>
                  <label for="emailUsername" class="block text-sm font-medium text-gray-700 mb-2">
                    Email Username
                  </label>
                <input
                  type="text"
                  id="emailUsername"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Username"
                />
              </div>

              <!-- Email Password -->
              <div>
                <label for="emailPassword" class="block text-sm font-medium text-gray-700 mb-2">
                  Email Password
                </label>
                <input
                  type="password"
                  id="emailPassword"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Password"
                />
              </div>

              <!-- Test Email -->
              <div class="flex gap-3">
                <button
                  id="testEmail"
                  class="flex-1 bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"
                >
                  Send Test Email
                </button>
                <button
                  id="saveEmailConfig"
                  class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                >
                  Save Email Settings
                </button>
              </div>
            </div>
          </div>

          <!-- Security Settings -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
              <div class="p-6 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Security Settings</h2>
                <p class="text-sm text-gray-600 mt-1">System security related configuration</p>
              </div>
            <div class="p-6 space-y-6">
              <!-- Minimum Password Length -->
              <div>
                  <label for="minPasswordLength" class="block text-sm font-medium text-gray-700 mb-2">
                    Minimum Password Length
                  </label>
                <input
                  type="number"
                  id="minPasswordLength"
                  min="6"
                  max="20"
                  value="8"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <!-- Session Timeout -->
              <div>
                  <label for="sessionTimeout" class="block text-sm font-medium text-gray-700 mb-2">
                    Session Timeout (Hours)
                  </label>
                <input
                  type="number"
                  id="sessionTimeout"
                  min="1"
                  max="168"
                  value="24"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <!-- Login Failure Limit -->
              <div>
                  <label for="maxLoginAttempts" class="block text-sm font-medium text-gray-700 mb-2">
                    Maximum Login Attempts
                  </label>
                <input
                  type="number"
                  id="maxLoginAttempts"
                  min="3"
                  max="10"
                  value="5"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <!-- Force Two-Factor Authentication -->
              <div class="flex items-center justify-between">
                <div>
                  <label class="text-sm font-medium text-gray-700">Require Two-Factor Authentication</label>
                  <p class="text-sm text-gray-500">Require all users to enable two-factor authentication</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="force2FA" class="sr-only peer" />
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              <button
                id="saveSecurityConfig"
                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
              >
                Save Security Settings
              </button>
            </div>
          </div>

          <!-- Backup & Recovery -->
          <div class="bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="p-6 border-b border-gray-200">
              <h2 class="text-xl font-semibold text-gray-900">Backup & Recovery</h2>
              <p class="text-sm text-gray-600 mt-1">Data backup and recovery settings</p>
            </div>
            <div class="p-6 space-y-6">
              <!-- Auto Backup -->
              <div class="flex items-center justify-between">
                <div>
                  <label class="text-sm font-medium text-gray-700">Auto Backup</label>
                  <p class="text-sm text-gray-500">Enable regular automatic backups</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="autoBackup" class="sr-only peer" checked />
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              <!-- Backup Frequency -->
              <div>
                <label for="backupFrequency" class="block text-sm font-medium text-gray-700 mb-2">
                  Backup Frequency
                </label>
                <select
                  id="backupFrequency"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                </select>
              </div>

              <!-- Backup Retention Days -->
              <div>
                <label for="backupRetention" class="block text-sm font-medium text-gray-700 mb-2">
                  Backup Retention Days
                </label>
                <input
                  type="number"
                  id="backupRetention"
                  min="7"
                  max="365"
                  value="30"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <!-- Last Backup Time -->
              <div class="bg-gray-50 p-4 rounded-md">
                <div class="flex justify-between items-center">
                  <span class="text-sm font-medium text-gray-700">Last Backup Time</span>
                  <span id="lastBackupTime" class="text-sm text-gray-600">--</span>
                </div>
              </div>

              <!-- Action Buttons -->
              <div class="flex gap-3">
                <button
                  id="createBackup"
                  class="flex-1 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors"
                >
                  Backup Now
                </button>
                <button
                  id="saveBackupConfig"
                  class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                >
                  Save Settings
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- System Information -->
        <div class="mt-8 bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="p-6 border-b border-gray-200">
            <h2 class="text-xl font-semibold text-gray-900">System Information</h2>
            <p class="text-sm text-gray-600 mt-1">Current system status and information</p>
          </div>
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600" id="systemVersion">v1.0.0</div>
                <div class="text-sm text-gray-600">System Version</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600" id="systemUptime">--</div>
                <div class="text-sm text-gray-600">Uptime</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-purple-600" id="databaseSize">--</div>
                <div class="text-sm text-gray-600">Database Size</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-orange-600" id="storageUsed">--</div>
                <div class="text-sm text-gray-600">Storage Usage</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading State -->
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        <span class="text-gray-700">Processing...</span>
      </div>
    </div>

    <script>
      // Initialize on page load
      document.addEventListener('DOMContentLoaded', function() {
        loadSystemSettings();
        loadSystemInfo();
      });

      // Load system settings
      async function loadSystemSettings() {
        try {
          const response = await fetch('/api/admin/system-settings');
          if (response.ok) {
            const settings = await response.json();
            populateSettings(settings);
          }
        } catch (error) {
          console.error('Error loading system settings:', error);
        }
      }

      // Populate settings form
      function populateSettings(settings) {
        if (settings.siteName) {
          document.getElementById('siteName').value = settings.siteName;
        }
        if (settings.siteDescription) {
          document.getElementById('siteDescription').value = settings.siteDescription;
        }
        if (settings.maintenanceMode !== undefined) {
          document.getElementById('maintenanceMode').checked = settings.maintenanceMode;
        }
        if (settings.allowRegistration !== undefined) {
          document.getElementById('allowRegistration').checked = settings.allowRegistration;
        }
        // Populate other settings...
      }

      // Load system information
      async function loadSystemInfo() {
        try {
          const response = await fetch('/api/admin/system-info');
          if (response.ok) {
            const info = await response.json();
            document.getElementById('systemUptime').textContent = info.uptime || '--';
            document.getElementById('databaseSize').textContent = info.databaseSize || '--';
            document.getElementById('storageUsed').textContent = info.storageUsed || '--';
            document.getElementById('lastBackupTime').textContent = info.lastBackupTime || '--';
          }
        } catch (error) {
          console.error('Error loading system info:', error);
        }
      }

      // Save system configuration
      document.getElementById('saveSystemConfig').addEventListener('click', async function() {
        const settings = {
          siteName: document.getElementById('siteName').value,
          siteDescription: document.getElementById('siteDescription').value,
          maintenanceMode: document.getElementById('maintenanceMode').checked,
          allowRegistration: document.getElementById('allowRegistration').checked
        };

        await saveSettings('system', settings);
      });

      // Save email settings
      document.getElementById('saveEmailConfig').addEventListener('click', async function() {
        const settings = {
          smtpHost: document.getElementById('smtpHost').value,
          smtpPort: parseInt(document.getElementById('smtpPort').value),
          fromEmail: document.getElementById('fromEmail').value,
          emailUsername: document.getElementById('emailUsername').value,
          emailPassword: document.getElementById('emailPassword').value
        };

        await saveSettings('email', settings);
      });

      // Save security settings
      document.getElementById('saveSecurityConfig').addEventListener('click', async function() {
        const settings = {
          minPasswordLength: parseInt(document.getElementById('minPasswordLength').value),
          sessionTimeout: parseInt(document.getElementById('sessionTimeout').value),
          maxLoginAttempts: parseInt(document.getElementById('maxLoginAttempts').value),
          force2FA: document.getElementById('force2FA').checked
        };

        await saveSettings('security', settings);
      });

      // Save backup settings
      document.getElementById('saveBackupConfig').addEventListener('click', async function() {
        const settings = {
          autoBackup: document.getElementById('autoBackup').checked,
          backupFrequency: document.getElementById('backupFrequency').value,
          backupRetention: parseInt(document.getElementById('backupRetention').value)
        };

        await saveSettings('backup', settings);
      });

      // Generic save settings function
      async function saveSettings(category, settings) {
        showLoading(true);
        try {
          const response = await fetch('/api/admin/system-settings', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ category, settings })
          });

          if (response.ok) {
            showNotification('Settings saved successfully', 'success');
          } else {
            const error = await response.json();
            showNotification(error.error || 'Save failed', 'error');
          }
        } catch (error) {
          console.error('Error saving settings:', error);
          showNotification('Save failed', 'error');
        } finally {
          showLoading(false);
        }
      }

      // Send test email
      document.getElementById('testEmail').addEventListener('click', async function() {
        showLoading(true);
        try {
          const response = await fetch('/api/admin/test-email', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              smtpHost: document.getElementById('smtpHost').value,
              smtpPort: parseInt(document.getElementById('smtpPort').value),
              fromEmail: document.getElementById('fromEmail').value,
              emailUsername: document.getElementById('emailUsername').value,
              emailPassword: document.getElementById('emailPassword').value
            })
          });

          if (response.ok) {
            showNotification('Test email sent successfully', 'success');
          } else {
            const error = await response.json();
            showNotification(error.error || 'Test email sending failed', 'error');
          }
        } catch (error) {
          console.error('Error sending test email:', error);
          showNotification('Test email sending failed', 'error');
        } finally {
          showLoading(false);
        }
      });

      // Create backup now
      document.getElementById('createBackup').addEventListener('click', async function() {
        if (!confirm('Are you sure you want to create a backup now?')) {
          return;
        }

        showLoading(true);
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST'
          });

          if (response.ok) {
            showNotification('Backup created successfully', 'success');
            loadSystemInfo(); // Refresh system information
          } else {
            const error = await response.json();
            showNotification(error.error || 'Backup creation failed', 'error');
          }
        } catch (error) {
          console.error('Error creating backup:', error);
          showNotification('Backup creation failed', 'error');
        } finally {
          showLoading(false);
        }
      });

      // Show loading state
      function showLoading(show) {
        const overlay = document.getElementById('loadingOverlay');
        if (show) {
          overlay.classList.remove('hidden');
        } else {
          overlay.classList.add('hidden');
        }
      }

      // Show notification
      function showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-md shadow-lg text-white ${
          type === 'success' ? 'bg-green-500' : 
          type === 'error' ? 'bg-red-500' : 
          'bg-blue-500'
        }`;
        notification.textContent = message;

        document.body.appendChild(notification);

        // Auto remove after 3 seconds
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
    </script>
  </RoleGuard>
</Layout>