---
import Layout from '../../layouts/Layout.astro';
import RoleGuard from '../../components/RoleGuard.astro';

// 获取用户会话和角色
const session = Astro.locals.session;
const user = Astro.locals.user;

if (!session || !user) {
  return Astro.redirect('/login');
}

// 获取用户角色
const userRole = await getUserRole(user.id);
if (!userRole || !['admin', 'super'].includes(userRole.role)) {
  return Astro.redirect('/dashboard');
}

// 获取备份数据
const backupData = await getBackupData();

// 获取用户角色函数
async function getUserRole(userId: string) {
  try {
    // 这里应该从数据库获取用户角色
    // 模拟数据
    const mockRoles = {
      'user123': { role: 'admin', permissions: ['read', 'write', 'delete'] },
      'admin456': { role: 'super', permissions: ['read', 'write', 'delete', 'admin'] }
    };
    
    return mockRoles[userId as keyof typeof mockRoles] || null;
  } catch (error) {
    console.error('Get user role error:', error);
    return null;
  }
}

// 获取备份数据函数
async function getBackupData() {
  try {
    // 这里应该从数据库或备份服务获取真实数据
    // 模拟数据
    return {
      overview: {
        totalBackups: 45,
        lastBackupDate: '2024-01-07 02:00:00',
        nextScheduledBackup: '2024-01-08 02:00:00',
        totalBackupSize: '2.3 GB',
        availableStorage: '47.7 GB',
        backupStatus: 'healthy',
        autoBackupEnabled: true,
        retentionDays: 30
      },
      recentBackups: [
        {
          id: 'backup_20240107_020000',
          type: 'full',
          status: 'completed',
          size: '156.7 MB',
          duration: '2m 34s',
          createdAt: '2024-01-07 02:00:00',
          completedAt: '2024-01-07 02:02:34',
          description: 'Scheduled full backup'
        },
        {
          id: 'backup_20240106_020000',
          type: 'incremental',
          status: 'completed',
          size: '23.4 MB',
          duration: '45s',
          createdAt: '2024-01-06 02:00:00',
          completedAt: '2024-01-06 02:00:45',
          description: 'Scheduled incremental backup'
        },
        {
          id: 'backup_20240105_143000',
          type: 'manual',
          status: 'completed',
          size: '145.2 MB',
          duration: '2m 12s',
          createdAt: '2024-01-05 14:30:00',
          completedAt: '2024-01-05 14:32:12',
          description: 'Manual backup before system update'
        },
        {
          id: 'backup_20240105_020000',
          type: 'full',
          status: 'failed',
          size: '0 MB',
          duration: '1m 23s',
          createdAt: '2024-01-05 02:00:00',
          completedAt: '2024-01-05 02:01:23',
          description: 'Scheduled full backup',
          error: 'Database connection timeout'
        }
      ],
      backupSettings: {
        autoBackup: true,
        backupFrequency: 'daily',
        backupTime: '02:00',
        retentionDays: 30,
        compressionEnabled: true,
        encryptionEnabled: true,
        notificationEnabled: true,
        notificationEmail: 'admin@example.com'
      }
    };
  } catch (error) {
    console.error('Get backup data error:', error);
    return null;
  }
}
---

<Layout title="备份恢复 - 管理员面板">
  <RoleGuard allowedRoles={['admin', 'super']}>
    <div class="min-h-screen bg-gray-50 py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- 页面标题 -->
        <div class="mb-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">备份恢复</h1>
              <p class="mt-2 text-gray-600">管理系统备份和数据恢复</p>
            </div>
            <div class="flex space-x-3">
              <button 
                onclick="createBackup()"
                class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                <span>创建备份</span>
              </button>
              <button 
                onclick="refreshBackups()"
                class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center space-x-2"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                <span>刷新</span>
              </button>
            </div>
          </div>
        </div>

        <!-- 备份概览 -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">总备份数</p>
                <p class="text-2xl font-bold text-gray-900">{backupData?.overview.totalBackups || 0}</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">最后备份</p>
                <p class="text-sm font-bold text-gray-900">{backupData?.overview.lastBackupDate || 'N/A'}</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-purple-100 rounded-lg">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">备份大小</p>
                <p class="text-2xl font-bold text-gray-900">{backupData?.overview.totalBackupSize || '0 MB'}</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
              <div class="p-2 bg-yellow-100 rounded-lg">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">备份状态</p>
                <p class="text-sm font-bold text-green-600">
                  {backupData?.overview.backupStatus === 'healthy' ? '正常' : '异常'}
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- 主要内容区域 -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- 备份列表 -->
          <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow">
              <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                  <h2 class="text-lg font-semibold text-gray-900">备份历史</h2>
                  <div class="flex items-center space-x-3">
                    <select 
                      id="backupTypeFilter"
                      onchange="filterBackups()"
                      class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="all">所有类型</option>
                      <option value="full">完整备份</option>
                      <option value="incremental">增量备份</option>
                      <option value="manual">手动备份</option>
                    </select>
                    <select 
                      id="backupStatusFilter"
                      onchange="filterBackups()"
                      class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="all">所有状态</option>
                      <option value="completed">已完成</option>
                      <option value="failed">失败</option>
                      <option value="running">进行中</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">备份信息</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">类型</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">状态</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">大小</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">时长</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200" id="backupsTableBody">
                    {backupData?.recentBackups.map((backup) => (
                      <tr key={backup.id} class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div class="text-sm font-medium text-gray-900">{backup.id}</div>
                            <div class="text-sm text-gray-500">{backup.description}</div>
                            <div class="text-xs text-gray-400">{backup.createdAt}</div>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            backup.type === 'full' ? 'bg-blue-100 text-blue-800' :
                            backup.type === 'incremental' ? 'bg-green-100 text-green-800' :
                            'bg-purple-100 text-purple-800'
                          }`}>
                            {backup.type === 'full' ? '完整' : backup.type === 'incremental' ? '增量' : '手动'}
                          </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            backup.status === 'completed' ? 'bg-green-100 text-green-800' :
                            backup.status === 'failed' ? 'bg-red-100 text-red-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {backup.status === 'completed' ? '已完成' : backup.status === 'failed' ? '失败' : '进行中'}
                          </span>
                          {backup.error && (
                            <div class="text-xs text-red-500 mt-1">{backup.error}</div>
                          )}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {backup.size}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {backup.duration}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <div class="flex items-center space-x-2">
                            {backup.status === 'completed' && (
                              <>
                                <button 
                                  onclick={`downloadBackup('${backup.id}')`}
                                  class="text-blue-600 hover:text-blue-900"
                                  title="下载备份"
                                >
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                  </svg>
                                </button>
                                <button 
                                  onclick={`restoreBackup('${backup.id}')`}
                                  class="text-green-600 hover:text-green-900"
                                  title="恢复备份"
                                >
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                  </svg>
                                </button>
                              </>
                            )}
                            <button 
                              onclick={`viewBackupDetails('${backup.id}')`}
                              class="text-gray-600 hover:text-gray-900"
                              title="查看详情"
                            >
                              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                              </svg>
                            </button>
                            <button 
                              onclick={`deleteBackup('${backup.id}')`}
                              class="text-red-600 hover:text-red-900"
                              title="删除备份"
                            >
                              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                              </svg>
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- 备份设置和快速操作 -->
          <div class="space-y-6">
            <!-- 快速操作 -->
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">快速操作</h3>
              <div class="space-y-3">
                <button 
                  onclick="createFullBackup()"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"></path>
                  </svg>
                  <span>创建完整备份</span>
                </button>
                <button 
                  onclick="createIncrementalBackup()"
                  class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                  <span>创建增量备份</span>
                </button>
                <button 
                  onclick="showRestoreModal()"
                  class="w-full bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors flex items-center justify-center space-x-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                  <span>恢复数据</span>
                </button>
                <button 
                  onclick="cleanupOldBackups()"
                  class="w-full bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center space-x-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  <span>清理旧备份</span>
                </button>
              </div>
            </div>

            <!-- 备份设置 -->
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">备份设置</h3>
              <div class="space-y-4">
                <div class="flex items-center justify-between">
                  <label class="text-sm font-medium text-gray-700">自动备份</label>
                  <input 
                    type="checkbox" 
                    id="autoBackup"
                    checked={backupData?.backupSettings.autoBackup}
                    onchange="toggleAutoBackup()"
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">备份频率</label>
                  <select 
                    id="backupFrequency"
                    onchange="updateBackupSettings()"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="daily" selected={backupData?.backupSettings.backupFrequency === 'daily'}>每日</option>
                    <option value="weekly" selected={backupData?.backupSettings.backupFrequency === 'weekly'}>每周</option>
                    <option value="monthly" selected={backupData?.backupSettings.backupFrequency === 'monthly'}>每月</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">备份时间</label>
                  <input 
                    type="time" 
                    id="backupTime"
                    value={backupData?.backupSettings.backupTime}
                    onchange="updateBackupSettings()"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">保留天数</label>
                  <input 
                    type="number" 
                    id="retentionDays"
                    value={backupData?.backupSettings.retentionDays}
                    min="1" 
                    max="365"
                    onchange="updateBackupSettings()"
                    class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                
                <div class="flex items-center justify-between">
                  <label class="text-sm font-medium text-gray-700">启用压缩</label>
                  <input 
                    type="checkbox" 
                    id="compressionEnabled"
                    checked={backupData?.backupSettings.compressionEnabled}
                    onchange="updateBackupSettings()"
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                </div>
                
                <div class="flex items-center justify-between">
                  <label class="text-sm font-medium text-gray-700">启用加密</label>
                  <input 
                    type="checkbox" 
                    id="encryptionEnabled"
                    checked={backupData?.backupSettings.encryptionEnabled}
                    onchange="updateBackupSettings()"
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                </div>
                
                <button 
                  onclick="saveBackupSettings()"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  保存设置
                </button>
              </div>
            </div>

            <!-- 存储信息 -->
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">存储信息</h3>
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">已用空间:</span>
                  <span class="text-sm font-medium text-gray-900">{backupData?.overview.totalBackupSize}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-gray-600">可用空间:</span>
                  <span class="text-sm font-medium text-gray-900">{backupData?.overview.availableStorage}</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-blue-600 h-2 rounded-full" style="width: 4.6%"></div>
                </div>
                <p class="text-xs text-gray-500">使用率: 4.6%</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 创建备份模态框 -->
    <div id="createBackupModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">创建备份</h3>
        </div>
        <div class="px-6 py-4">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">备份类型</label>
              <select id="newBackupType" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="full">完整备份</option>
                <option value="incremental">增量备份</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">备份描述</label>
              <input 
                type="text" 
                id="newBackupDescription"
                placeholder="输入备份描述..."
                class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="newBackupCompress"
                checked
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label class="ml-2 text-sm text-gray-700">启用压缩</label>
            </div>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <button 
            onclick="closeCreateBackupModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            取消
          </button>
          <button 
            onclick="confirmCreateBackup()"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors"
          >
            创建备份
          </button>
        </div>
      </div>
    </div>

    <!-- 恢复备份模态框 -->
    <div id="restoreModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">恢复备份</h3>
        </div>
        <div class="px-6 py-4">
          <div class="space-y-4">
            <div class="bg-yellow-50 border border-yellow-200 rounded-md p-4">
              <div class="flex">
                <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-yellow-800">警告</h3>
                  <p class="text-sm text-yellow-700 mt-1">恢复备份将覆盖当前数据，此操作不可逆。请确保您了解此操作的后果。</p>
                </div>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">选择备份</label>
              <select id="restoreBackupId" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                {backupData?.recentBackups.filter(b => b.status === 'completed').map((backup) => (
                  <option key={backup.id} value={backup.id}>
                    {backup.id} - {backup.createdAt} ({backup.size})
                  </option>
                ))}
              </select>
            </div>
            <div class="flex items-center">
              <input 
                type="checkbox" 
                id="confirmRestore"
                class="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded"
              />
              <label class="ml-2 text-sm text-gray-700">我确认要恢复此备份并覆盖当前数据</label>
            </div>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <button 
            onclick="closeRestoreModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            取消
          </button>
          <button 
            onclick="confirmRestore()"
            class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 transition-colors"
          >
            确认恢复
          </button>
        </div>
      </div>
    </div>

    <!-- 备份详情模态框 -->
    <div id="backupDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">备份详情</h3>
        </div>
        <div class="px-6 py-4 max-h-96 overflow-y-auto">
          <div id="backupDetailsContent">
            <!-- 备份详情内容将通过JavaScript动态填充 -->
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end">
          <button 
            onclick="closeBackupDetailsModal()"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            关闭
          </button>
        </div>
      </div>
    </div>

    <script>
      // 页面数据
      let backupsData = [];
      let filteredBackups = [];

      // 初始化页面
      document.addEventListener('DOMContentLoaded', function() {
        loadBackupsData();
      });

      // 加载备份数据
      async function loadBackupsData() {
        try {
          const response = await fetch('/api/admin/backup');
          const result = await response.json();
          
          if (result.success) {
            backupsData = result.data.backups || [];
            filteredBackups = [...backupsData];
            updateBackupsTable();
          } else {
            console.error('Failed to load backups data:', result.error);
          }
        } catch (error) {
          console.error('Save backup settings error:', error);
          alert('设置保存失败');
        }
      }

      // 点击模态框外部关闭
      document.addEventListener('click', function(event) {
        const modals = ['createBackupModal', 'restoreModal', 'backupDetailsModal'];
        
        modals.forEach(modalId => {
          const modal = document.getElementById(modalId);
          if (modal && !modal.classList.contains('hidden')) {
            const modalContent = modal.querySelector('div > div');
            if (modalContent && !modalContent.contains(event.target)) {
              modal.classList.add('hidden');
              modal.classList.remove('flex');
            }
          }
        });
      });
    </script>
  </RoleGuard>
</Layout>
          console.error('Error loading backups data:', error);
        }
      }

      // 更新备份表格
      function updateBackupsTable() {
        const tbody = document.getElementById('backupsTableBody');
        if (!tbody) return;

        tbody.innerHTML = filteredBackups.map(backup => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap">
              <div>
                <div class="text-sm font-medium text-gray-900">${backup.id}</div>
                <div class="text-sm text-gray-500">${backup.description}</div>
                <div class="text-xs text-gray-400">${backup.createdAt}</div>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                backup.type === 'full' ? 'bg-blue-100 text-blue-800' :
                backup.type === 'incremental' ? 'bg-green-100 text-green-800' :
                'bg-purple-100 text-purple-800'
              }">
                ${backup.type === 'full' ? '完整' : backup.type === 'incremental' ? '增量' : '手动'}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                backup.status === 'completed' ? 'bg-green-100 text-green-800' :
                backup.status === 'failed' ? 'bg-red-100 text-red-800' :
                'bg-yellow-100 text-yellow-800'
              }">
                ${backup.status === 'completed' ? '已完成' : backup.status === 'failed' ? '失败' : '进行中'}
              </span>
              ${backup.error ? `<div class="text-xs text-red-500 mt-1">${backup.error}</div>` : ''}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              ${backup.size}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              ${backup.duration}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <div class="flex items-center space-x-2">
                ${backup.status === 'completed' ? `
                  <button onclick="downloadBackup('${backup.id}')" class="text-blue-600 hover:text-blue-900" title="下载备份">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                  </button>
                  <button onclick="restoreBackup('${backup.id}')" class="text-green-600 hover:text-green-900" title="恢复备份">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                  </button>
                ` : ''}
                <button onclick="viewBackupDetails('${backup.id}')" class="text-gray-600 hover:text-gray-900" title="查看详情">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                </button>
                <button onclick="deleteBackup('${backup.id}')" class="text-red-600 hover:text-red-900" title="删除备份">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            </td>
          </tr>
        `).join('');
      }

      // 筛选备份
      function filterBackups() {
        const typeFilter = document.getElementById('backupTypeFilter')?.value || 'all';
        const statusFilter = document.getElementById('backupStatusFilter')?.value || 'all';
        
        filteredBackups = backupsData.filter(backup => {
          const typeMatch = typeFilter === 'all' || backup.type === typeFilter;
          const statusMatch = statusFilter === 'all' || backup.status === statusFilter;
          return typeMatch && statusMatch;
        });
        
        updateBackupsTable();
      }

      // 刷新备份数据
      async function refreshBackups() {
        await loadBackupsData();
      }

      // 创建备份
      function createBackup() {
        document.getElementById('createBackupModal').classList.remove('hidden');
        document.getElementById('createBackupModal').classList.add('flex');
      }

      // 创建完整备份
      async function createFullBackup() {
        await performBackup('full', '手动完整备份');
      }

      // 创建增量备份
      async function createIncrementalBackup() {
        await performBackup('incremental', '手动增量备份');
      }

      // 执行备份
      async function performBackup(type, description) {
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              action: 'create_backup',
              type,
              description
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert('备份创建成功！');
            await loadBackupsData();
          } else {
            alert('备份创建失败: ' + result.error);
          }
        } catch (error) {
          console.error('Create backup error:', error);
          alert('备份创建失败');
        }
      }

      // 确认创建备份
      async function confirmCreateBackup() {
        const type = document.getElementById('newBackupType')?.value || 'full';
        const description = document.getElementById('newBackupDescription')?.value || '手动备份';
        
        closeCreateBackupModal();
        await performBackup(type, description);
      }

      // 关闭创建备份模态框
      function closeCreateBackupModal() {
        document.getElementById('createBackupModal').classList.add('hidden');
        document.getElementById('createBackupModal').classList.remove('flex');
      }

      // 显示恢复模态框
      function showRestoreModal() {
        document.getElementById('restoreModal').classList.remove('hidden');
        document.getElementById('restoreModal').classList.add('flex');
      }

      // 恢复备份
      function restoreBackup(backupId) {
        document.getElementById('restoreBackupId').value = backupId;
        showRestoreModal();
      }

      // 确认恢复
      async function confirmRestore() {
        const backupId = document.getElementById('restoreBackupId')?.value;
        const confirmed = document.getElementById('confirmRestore')?.checked;
        
        if (!confirmed) {
          alert('请确认您了解恢复操作的后果');
          return;
        }
        
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              action: 'restore_backup',
              backupId
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert('备份恢复成功！');
            closeRestoreModal();
          } else {
            alert('备份恢复失败: ' + result.error);
          }
        } catch (error) {
          console.error('Restore backup error:', error);
          alert('备份恢复失败');
        }
      }

      // 关闭恢复模态框
      function closeRestoreModal() {
        document.getElementById('restoreModal').classList.add('hidden');
        document.getElementById('restoreModal').classList.remove('flex');
        document.getElementById('confirmRestore').checked = false;
      }

      // 下载备份
      async function downloadBackup(backupId) {
        try {
          const response = await fetch(`/api/admin/backup?action=download&backupId=${backupId}`);
          
          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `backup_${backupId}.zip`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
          } else {
            alert('下载失败');
          }
        } catch (error) {
          console.error('Download backup error:', error);
          alert('下载失败');
        }
      }

      // 查看备份详情
      async function viewBackupDetails(backupId) {
        try {
          const response = await fetch(`/api/admin/backup?action=details&backupId=${backupId}`);
          const result = await response.json();
          
          if (result.success) {
            const details = result.data;
            const content = document.getElementById('backupDetailsContent');
            content.innerHTML = `
              <div class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700">备份ID</label>
                    <p class="text-sm text-gray-900">${details.id}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">类型</label>
                    <p class="text-sm text-gray-900">${details.type === 'full' ? '完整备份' : details.type === 'incremental' ? '增量备份' : '手动备份'}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">状态</label>
                    <p class="text-sm text-gray-900">${details.status === 'completed' ? '已完成' : details.status === 'failed' ? '失败' : '进行中'}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">大小</label>
                    <p class="text-sm text-gray-900">${details.size}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">创建时间</label>
                    <p class="text-sm text-gray-900">${details.createdAt}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">完成时间</label>
                    <p class="text-sm text-gray-900">${details.completedAt || 'N/A'}</p>
                  </div>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700">描述</label>
                  <p class="text-sm text-gray-900">${details.description}</p>
                </div>
                ${details.error ? `
                  <div>
                    <label class="block text-sm font-medium text-red-700">错误信息</label>
                    <p class="text-sm text-red-600">${details.error}</p>
                  </div>
                ` : ''}
                ${details.files ? `
                  <div>
                    <label class="block text-sm font-medium text-gray-700">包含文件</label>
                    <div class="mt-2 max-h-32 overflow-y-auto">
                      <ul class="text-sm text-gray-600 space-y-1">
                        ${details.files.map(file => `<li>• ${file}</li>`).join('')}
                      </ul>
                    </div>
                  </div>
                ` : ''}
              </div>
            `;
            
            document.getElementById('backupDetailsModal').classList.remove('hidden');
            document.getElementById('backupDetailsModal').classList.add('flex');
          } else {
            alert('获取备份详情失败: ' + result.error);
          }
        } catch (error) {
          console.error('View backup details error:', error);
          alert('获取备份详情失败');
        }
      }

      // 关闭备份详情模态框
      function closeBackupDetailsModal() {
        document.getElementById('backupDetailsModal').classList.add('hidden');
        document.getElementById('backupDetailsModal').classList.remove('flex');
      }

      // 删除备份
      async function deleteBackup(backupId) {
        if (!confirm('确定要删除此备份吗？此操作不可逆。')) {
          return;
        }
        
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              action: 'delete_backup',
              backupId
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert('备份删除成功！');
            await loadBackupsData();
          } else {
            alert('备份删除失败: ' + result.error);
          }
        } catch (error) {
          console.error('Delete backup error:', error);
          alert('备份删除失败');
        }
      }

      // 清理旧备份
      async function cleanupOldBackups() {
        if (!confirm('确定要清理旧备份吗？这将删除超过保留期限的备份。')) {
          return;
        }
        
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              action: 'cleanup_old_backups'
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert(`清理完成！删除了 ${result.data.deletedCount} 个旧备份。`);
            await loadBackupsData();
          } else {
            alert('清理失败: ' + result.error);
          }
        } catch (error) {
          console.error('Cleanup old backups error:', error);
          alert('清理失败');
        }
      }

      // 切换自动备份
      async function toggleAutoBackup() {
        const enabled = document.getElementById('autoBackup')?.checked;
        await updateBackupSettings();
      }

      // 更新备份设置
      async function updateBackupSettings() {
        // 这里可以实时更新设置，但通常建议用户点击保存按钮
      }

      // 保存备份设置
      async function saveBackupSettings() {
        const settings = {
          autoBackup: document.getElementById('autoBackup')?.checked,
          backupFrequency: document.getElementById('backupFrequency')?.value,
          backupTime: document.getElementById('backupTime')?.value,
          retentionDays: parseInt(document.getElementById('retentionDays')?.value || '30'),
          compressionEnabled: document.getElementById('compressionEnabled')?.checked,
          encryptionEnabled: document.getElementById('encryptionEnabled')?.checked
        };
        
        try {
          const response = await fetch('/api/admin/backup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              action: 'update_settings',
              settings
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            alert('设置保存成功！');
          } else {
            alert('设置保存失败: ' + result.error);
          }
        } catch (error) {